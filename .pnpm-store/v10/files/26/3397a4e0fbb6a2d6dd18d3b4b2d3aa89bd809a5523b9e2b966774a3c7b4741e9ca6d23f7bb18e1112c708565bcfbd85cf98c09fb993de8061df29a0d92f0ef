import * as React from "react";
export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
    /**
     * When provided, the input will treat its value as numeric + unit and will:
     *   • append the unit on blur if the user omitted it
     *   • increment / decrement with ArrowUp / ArrowDown keys
     *   • call `onCommit` (if supplied) on blur or Enter key press
     *
     * Existing `onBlur` / `onKeyDown` handlers can still be supplied; if they are
     * present they take precedence and the default numeric behaviors are skipped
     * so the consumer has full control.
     */
    defaultUnit?: string;
    /** Increment amount used with ArrowUp / ArrowDown. Defaults to 1. */
    incrementStep?: number;
    /**
     * Optional React element to render at the start (left side) of the input.
     * Similar to the concept of an "enhancer" in many UI libraries.
     */
    startEnhancer?: React.ReactNode;
    /**
     * Optional React element to render at the end (right side) of the input.
     * Will be pushed to the far right via `ml-auto`.
     */
    endEnhancer?: React.ReactNode;
    /**
     * Fired when the user "commits" a value – either by blurring the field or
     * pressing Enter. The *final* string value (with ensured unit) is passed.
     */
    onCommit?: (value: string) => void;
    /**
     * If true (default), `onCommit` will fire as the user types, debounced by
     * `commitDebounceMs`. Set to `false` to preserve the previous behaviour where
     * commits are only triggered on blur or Enter.
     */
    commitOnChange?: boolean;
    /**
     * Debounce duration (in milliseconds) used when `commitOnChange` is true.
     * Defaults to 500 ms.
     */
    commitDebounceMs?: number;
    topLabel?: string;
}
declare const Input: React.ForwardRefExoticComponent<InputProps & React.RefAttributes<HTMLInputElement>>;
export { Input };
//# sourceMappingURL=input.d.ts.map