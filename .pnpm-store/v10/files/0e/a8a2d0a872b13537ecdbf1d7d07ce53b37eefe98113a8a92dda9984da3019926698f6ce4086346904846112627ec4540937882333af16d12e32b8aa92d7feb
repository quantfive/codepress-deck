export const IS_DEVELOPMENT = import.meta.env.MODE === "development";
export const FRONTEND_BASE_URL = import.meta.env.VITE_FRONTEND_BASE_URL ||
    (IS_DEVELOPMENT ? "http://localhost:3000" : "https://codepress.dev");
// API Base URLs (overridable at runtime)
export let API_BASE_URL = import.meta.env.VITE_API_BASE_URL ||
    (IS_DEVELOPMENT
        ? "http://localhost:8007/v1"
        : "https://api.codepress.dev/v1");
export let OAUTH_BASE_URL = import.meta.env.VITE_OAUTH_BASE_URL ||
    (IS_DEVELOPMENT ? "https://patrick-cp.ngrok.io" : "https://codepress.dev");
// Legacy base URL (to be migrated)
export const BASE_LOCAL_CODEPRESS_DEPRECATED = import.meta.env.VITE_BASE_LOCAL_CODEPRESS || "http://localhost:4321";
const GITHUB_MODE_LS_KEY = "codepressGitHubMode";
export function checkGithubMode() {
    if (typeof localStorage !== "undefined") {
        return localStorage.getItem(GITHUB_MODE_LS_KEY) === "true";
    }
    else {
        return false;
    }
}
export function setGitHubMode(on) {
    if (typeof localStorage !== "undefined") {
        localStorage.setItem(GITHUB_MODE_LS_KEY, on.toString());
        return true;
    }
    return false;
}
// Detect if the current page is a local development URL
export function isLocalDevPage() {
    try {
        const host = window.location.hostname;
        return (host === "localhost" ||
            host === "127.0.0.1" ||
            host === "0.0.0.0" ||
            host === "::1" ||
            host.endsWith(".localhost"));
    }
    catch {
        return false;
    }
}
// Local dev heuristic for published extension: localhost and not GitHub mode
export function isLocalDevNonGithub() {
    return isLocalDevPage() && !checkGithubMode();
}
if (IS_DEVELOPMENT) {
    console.log("API", API_BASE_URL, "FRONTEND", FRONTEND_BASE_URL, "AUTH", OAUTH_BASE_URL);
}
// const browserApi = getBrowserAPI();
// const LOCALHOST_PATTERN = "http://localhost:*/*";
// if (IS_DEVELOPMENT && browserApi && !import.meta.env.SSR) {
//   browserApi.action.onClicked.addListener(async () => {
//     const have = await browserApi.permissions.contains({ origins: [LOCALHOST_PATTERN] });
//     if (!have) {
//       const granted = await browserApi.permissions.request({ origins: [LOCALHOST_PATTERN] });
//       console.log("localhost host permission", granted ? "granted" : "denied");
//     }
//   });
// }
// Runtime overrides for host apps
export function setApiBaseUrlOverride(url) {
    if (url)
        API_BASE_URL = url;
}
export function setOauthBaseUrlOverride(url) {
    if (url)
        OAUTH_BASE_URL = url;
}
