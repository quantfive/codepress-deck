import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo, useState } from "react";
import { ChevronDown, ChevronUp, Loader2, ExternalLink, Plus, Trash, } from "lucide-react";
import { Popover, PopoverContent, PopoverTrigger, } from "@/components/ui/popover";
import { deployStatusString, deployColor, stripBranchPrefix, sanitizeBranchName, addBranchPrefix, } from "@/lib/deployment";
import { checkGithubMode } from "@/lib/env";
import { useDeployment } from "@/context/DeploymentContext";
import BranchInput from "@/components/ui/BranchInput";
const BranchSelector = () => {
    const { branchName, setBranchName, currentDeployment, branches, isBranchesLoading, deleteBranch, } = useDeployment();
    const [isOpen, setIsOpen] = useState(false);
    const [newBranchInput, setNewBranchInput] = useState("");
    const sanitized = useMemo(() => sanitizeBranchName(newBranchInput), [newBranchInput]);
    // Sort branches to put the current branch at the top
    const sortedBranches = useMemo(() => {
        if (!branches)
            return branches;
        const currentBranchIndex = branches.findIndex((branch) => branch.name === branchName);
        if (currentBranchIndex === -1)
            return branches;
        const currentBranch = branches[currentBranchIndex];
        const otherBranches = branches.filter((_, index) => index !== currentBranchIndex);
        return [currentBranch, ...otherBranches];
    }, [branches, branchName]);
    const handleBranchSelect = (selectedBranch) => {
        setBranchName(selectedBranch);
        setIsOpen(false);
    };
    const handleCreate = () => {
        if (!sanitized)
            return;
        const full = addBranchPrefix(sanitized);
        setBranchName(full);
        setNewBranchInput("");
        setIsOpen(false);
    };
    const handleDelete = (branchName) => {
        deleteBranch(branchName);
    };
    if (!checkGithubMode()) {
        return (_jsx("div", { className: "flex items-center px-3 py-2 text-gray-900 text-sm", children: _jsx("span", { className: "whitespace-nowrap", children: stripBranchPrefix(branchName) || "Untitled" }) }));
    }
    return (_jsxs(Popover, { open: isOpen, onOpenChange: setIsOpen, children: [_jsx(PopoverTrigger, { asChild: true, children: _jsxs("button", { className: "flex items-center justify-between px-3 py-2 text-gray-900 text-sm hover:bg-gray-100 rounded-md min-w-[140px] gap-2 w-full", children: [_jsx("span", { className: `h-2 w-2 rounded-full flex-shrink-0 ${deployColor(currentDeployment)} inline-block` }), _jsx("span", { className: "whitespace-nowrap truncate", children: branchName || "Select branch" }), isOpen ? (_jsx(ChevronUp, { className: "h-4 w-4 ml-auto flex-shrink-0" })) : (_jsx(ChevronDown, { className: "h-4 w-4 ml-auto flex-shrink-0" }))] }) }), _jsxs(PopoverContent, { className: "z-[9999999999] w-[480px] p-0 shadow-xl border border-gray-200 bg-white rounded-lg", side: "top", sideOffset: 8, align: "start", children: [_jsx("div", { className: "p-3 border-b border-gray-200", children: _jsx("h4", { className: "text-sm font-semibold", children: "Select branch" }) }), _jsxs("div", { className: "max-h-[200px] overflow-y-auto", children: [sortedBranches?.map((branch) => {
                                const color = deployColor(branch.state);
                                const isSelected = branch.name === branchName;
                                return (_jsxs("button", { onClick: () => handleBranchSelect(branch.name), className: `w-full flex items-center justify-between px-3 py-2 text-left hover:bg-gray-50 transition-colors ${isSelected ? "bg-blue-50 border-r-2 border-blue-500" : ""}`, children: [_jsxs("div", { className: "flex items-center min-w-0", children: [_jsx("span", { className: `h-2 w-2 rounded-full ${color} mr-2 flex-shrink-0` }), _jsx("span", { className: "text-sm font-medium truncate", children: branch.name }), isSelected && (_jsx("span", { className: "ml-2 text-xs text-blue-600 font-medium", children: "(current)" }))] }), _jsxs("div", { className: "flex items-center text-xs text-gray-500 ml-2", children: [_jsx("span", { children: deployStatusString(branch.state) }), branch.preview_url && (_jsx(ExternalLink, { className: "w-3 h-3 ml-1", onClick: (e) => {
                                                        e.stopPropagation();
                                                        window.open(branch.preview_url, "_blank", "noopener,noreferrer");
                                                    } })), _jsx(Trash, { className: "w-3 h-3 ml-1", onClick: (e) => {
                                                        e.stopPropagation();
                                                        handleDelete(branch.name);
                                                    } })] })] }, branch.name));
                            }), isBranchesLoading && (_jsx("div", { className: "flex justify-center py-4", children: _jsx(Loader2, { className: "h-4 w-4 animate-spin text-gray-500" }) }))] }), _jsxs("div", { className: "p-3 border-t border-gray-200", children: [_jsx("div", { className: "text-xs font-medium text-gray-700 mb-2", children: "New branch" }), _jsx("div", { className: "flex items-center flex-col gap-2", children: _jsxs("div", { className: "flex-1 relative", children: [_jsx(BranchInput, { showPrefix: true, placeholder: "my-feature", value: newBranchInput, onChange: setNewBranchInput, className: "text-xs focus:ring-1 focus:ring-blue-500", onKeyDown: (e) => {
                                                if (e.key === "Enter") {
                                                    e.preventDefault();
                                                    handleCreate();
                                                }
                                            } }), _jsx("button", { onClick: handleCreate, disabled: !sanitized, className: "absolute right-[6px] top-1/2 -translate-y-1/2 flex items-center gap-1 text-xs p-1 rounded bg-blue-600 text-white disabled:opacity-50 hover:bg-blue-700 whitespace-nowrap", children: _jsx(Plus, { className: "w-3 h-3" }) })] }) })] })] })] }));
};
export default BranchSelector;
