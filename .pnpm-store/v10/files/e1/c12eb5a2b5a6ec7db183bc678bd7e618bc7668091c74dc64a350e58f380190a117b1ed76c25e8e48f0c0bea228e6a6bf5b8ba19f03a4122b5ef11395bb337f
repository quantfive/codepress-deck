import a from "./index245.js";
import _ from "./index247.js";
import z, { useState as E, useRef as D, useEffect as F } from "react";
import { j as s } from "./index7.js";
var V = ["prefixCls", "placement", "label", "value", "className", "style", "labelStyle", "inputStyle", "onChange", "onBlur", "renderInput"], L = (e) => /^#?([A-Fa-f0-9]{3,4}){1,2}$/.test(e), P = (e) => Number(String(e).replace(/%/g, "")), T = /* @__PURE__ */ z.forwardRef((e, d) => {
  var {
    prefixCls: x = "w-color-editable-input",
    placement: o = "bottom",
    label: p,
    value: g,
    className: h,
    style: y,
    labelStyle: S,
    inputStyle: w,
    onChange: l,
    onBlur: f,
    renderInput: c
  } = e, N = _(e, V), [b, n] = E(g), u = D(!1);
  F(() => {
    e.value !== b && (u.current || n(e.value));
  }, [e.value]);
  function j(t, R) {
    var i = (R || t.target.value).trim().replace(/^#/, "");
    L(i) && l && l(t, i);
    var m = P(i);
    isNaN(m) || l && l(t, m), n(i);
  }
  function C(t) {
    u.current = !1, n(e.value), f && f(t);
  }
  var r = {};
  o === "bottom" && (r.flexDirection = "column"), o === "top" && (r.flexDirection = "column-reverse"), o === "left" && (r.flexDirection = "row-reverse");
  var B = a({
    "--editable-input-label-color": "rgb(153, 153, 153)",
    "--editable-input-box-shadow": "rgb(204 204 204) 0px 0px 0px 1px inset",
    "--editable-input-color": "#666",
    position: "relative",
    alignItems: "center",
    display: "flex",
    fontSize: 11
  }, r, y), I = a({
    width: "100%",
    paddingTop: 2,
    paddingBottom: 2,
    paddingLeft: 3,
    paddingRight: 3,
    fontSize: 11,
    background: "transparent",
    boxSizing: "border-box",
    border: "none",
    color: "var(--editable-input-color)",
    boxShadow: "var(--editable-input-box-shadow)"
  }, w), v = a({
    value: b,
    onChange: j,
    onBlur: C,
    autoComplete: "off",
    onFocus: () => u.current = !0
  }, N, {
    style: I
  });
  return /* @__PURE__ */ s.jsxs("div", {
    className: [x, h || ""].filter(Boolean).join(" "),
    style: B,
    children: [c ? c(v, d) : /* @__PURE__ */ s.jsx("input", a({
      ref: d
    }, v)), p && /* @__PURE__ */ s.jsx("span", {
      style: a({
        color: "var(--editable-input-label-color)",
        textTransform: "capitalize"
      }, S),
      children: p
    })]
  });
});
T.displayName = "EditableInput";
export {
  T as default
};
