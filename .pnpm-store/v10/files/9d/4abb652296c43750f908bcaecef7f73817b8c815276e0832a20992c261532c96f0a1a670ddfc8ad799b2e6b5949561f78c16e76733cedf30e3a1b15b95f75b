import { j as e } from "./index7.js";
import { useState as G, useEffect as $ } from "react";
import { Input as u } from "./index51.js";
import { InputWithPopover as y } from "./index226.js";
import { Label as n } from "./index52.js";
import { Select as d, SelectTrigger as m, SelectValue as x, SelectContent as h, SelectItem as p } from "./index56.js";
import { ToggleGroup as D, ToggleGroupItem as I } from "./index55.js";
import { useVisualEditor as E } from "./index6.js";
import { usePopoverContainer as U } from "./index9.js";
const g = (v) => {
  if (v === "") return "";
  const f = v.trim();
  return /[^0-9.-]/.test(f.slice(-1)) ? f : `${f}px`;
}, q = ({ popoverContainer: v }) => {
  const {
    activeElementFpId: f,
    trackedElements: F,
    updateActiveElementStyle: V,
    editingState: N
  } = E(), O = U(), c = v ?? O ?? void 0, w = f ? F[f]?.element : null, j = f ? F[f]?.currentValues : null, [a, o] = G({
    position: "",
    top: "",
    right: "",
    bottom: "",
    left: "",
    zIndex: "",
    display: "",
    flexDirection: "",
    flexWrap: "",
    justifyContent: "",
    alignItems: "",
    alignContent: "",
    justifyItems: "",
    order: "",
    alignSelf: "",
    gridTemplateColumns: "",
    gridTemplateRows: "",
    gap: "",
    rowGap: "",
    columnGap: "",
    gridColumn: "",
    gridRow: "",
    overflow: "",
    overflowX: "",
    overflowY: ""
  }), [b, S] = G("columns");
  if ($(() => {
    if (!j) return;
    const s = (i) => {
      if (N === "normal")
        return j[i] ?? "";
      const l = `${N}_${i}`;
      return j[l] ?? j[i] ?? "";
    };
    o({
      position: s("position"),
      top: s("top"),
      right: s("right"),
      bottom: s("bottom"),
      left: s("left"),
      zIndex: j.zIndex ?? "",
      display: j.display ?? "",
      flexDirection: s("flexDirection"),
      flexWrap: s("flexWrap"),
      justifyContent: s("justifyContent"),
      alignItems: s("alignItems"),
      alignContent: s("alignContent"),
      justifyItems: s("justifyItems"),
      order: s("order"),
      alignSelf: s("alignSelf"),
      gridTemplateColumns: s("gridTemplateColumns"),
      gridTemplateRows: s("gridTemplateRows"),
      gap: s("gap"),
      rowGap: s("rowGap"),
      columnGap: s("columnGap"),
      gridColumn: s("gridColumn"),
      gridRow: s("gridRow"),
      overflow: s("overflow"),
      overflowX: s("overflowX"),
      overflowY: s("overflowY")
    });
  }, [j, N]), !w)
    return null;
  const t = (s) => {
    o((i) => ({ ...i, ...s })), V(s), Object.entries(s).forEach(([i, l]) => {
      w && (w.style[i] = l);
    });
  }, T = () => /* @__PURE__ */ e.jsxs("div", { className: "space-y-4", children: [
    /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
      /* @__PURE__ */ e.jsx(n, { htmlFor: "position-select", className: "text-sm", children: "Position" }),
      /* @__PURE__ */ e.jsxs(
        d,
        {
          value: a.position,
          onValueChange: (s) => t({ position: s }),
          children: [
            /* @__PURE__ */ e.jsx(m, { id: "position-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "static" }) }),
            /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: [
              "static",
              "relative",
              "absolute",
              "fixed",
              "sticky"
            ].map((s) => /* @__PURE__ */ e.jsx(p, { value: s, className: "text-sm", children: s }, s)) })
          ]
        }
      )
    ] }),
    /* @__PURE__ */ e.jsx("div", { className: "grid grid-cols-2 gap-2", children: [
      ["top", "Top"],
      ["right", "Right"],
      ["bottom", "Bottom"],
      ["left", "Left"]
    ].map(([s, i]) => /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
      /* @__PURE__ */ e.jsx(n, { htmlFor: `${s}-input`, className: "text-sm", children: i }),
      /* @__PURE__ */ e.jsx(
        u,
        {
          id: `${s}-input`,
          value: a[s],
          defaultUnit: "px",
          onChange: (l) => o((r) => ({ ...r, [s]: l.target.value })),
          onCommit: (l) => t({ [s]: g(l) })
        }
      )
    ] }, s)) }),
    /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
      /* @__PURE__ */ e.jsx(n, { htmlFor: "z-index-input", className: "text-sm", children: "z-index" }),
      /* @__PURE__ */ e.jsx(
        u,
        {
          id: "z-index-input",
          value: a.zIndex,
          type: "number",
          onChange: (s) => o((i) => ({ ...i, zIndex: s.target.value })),
          onCommit: (s) => t({ zIndex: s })
        }
      )
    ] })
  ] }), R = () => {
    const s = a.display.includes("grid"), i = a.display.includes("flex");
    return /* @__PURE__ */ e.jsxs("div", { className: "space-y-4", children: [
      /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
        /* @__PURE__ */ e.jsx(n, { htmlFor: "display-select", className: "text-sm", children: "Display" }),
        /* @__PURE__ */ e.jsxs(
          d,
          {
            value: a.display,
            onValueChange: (l) => t({ display: l }),
            children: [
              /* @__PURE__ */ e.jsx(m, { id: "display-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "block" }) }),
              /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: [
                "block",
                "inline",
                "inline-block",
                "flex",
                "inline-flex",
                "grid",
                "inline-grid",
                "contents",
                "none"
              ].map((l) => /* @__PURE__ */ e.jsx(p, { value: l, className: "text-sm", children: l }, l)) })
            ]
          }
        )
      ] }),
      i && /* @__PURE__ */ e.jsxs("div", { className: "grid grid-cols-2 gap-2", children: [
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "flex-direction-select", className: "text-sm", children: "flex-direction" }),
          /* @__PURE__ */ e.jsxs(
            d,
            {
              value: a.flexDirection,
              onValueChange: (l) => t({ flexDirection: l }),
              children: [
                /* @__PURE__ */ e.jsx(m, { id: "flex-direction-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "row" }) }),
                /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: ["row", "row-reverse", "column", "column-reverse"].map((l) => /* @__PURE__ */ e.jsx(p, { value: l, className: "text-sm", children: l }, l)) })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "flex-wrap-select", className: "text-sm", children: "flex-wrap" }),
          /* @__PURE__ */ e.jsxs(
            d,
            {
              value: a.flexWrap,
              onValueChange: (l) => t({ flexWrap: l }),
              children: [
                /* @__PURE__ */ e.jsx(m, { id: "flex-wrap-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "nowrap" }) }),
                /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: ["nowrap", "wrap", "wrap-reverse"].map((l) => /* @__PURE__ */ e.jsx(p, { value: l, className: "text-sm", children: l }, l)) })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "justify-content-select", className: "text-sm", children: "justify-content" }),
          /* @__PURE__ */ e.jsxs(
            d,
            {
              value: a.justifyContent,
              onValueChange: (l) => t({ justifyContent: l }),
              children: [
                /* @__PURE__ */ e.jsx(m, { id: "justify-content-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "flex-start" }) }),
                /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: ["flex-start", "center", "flex-end", "space-between", "space-around", "space-evenly"].map((l) => /* @__PURE__ */ e.jsx(p, { value: l, className: "text-sm", children: l }, l)) })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "align-items-select", className: "text-sm", children: "align-items" }),
          /* @__PURE__ */ e.jsxs(
            d,
            {
              value: a.alignItems,
              onValueChange: (l) => t({ alignItems: l }),
              children: [
                /* @__PURE__ */ e.jsx(m, { id: "align-items-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "stretch" }) }),
                /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: ["stretch", "center", "flex-start", "flex-end", "baseline"].map((l) => /* @__PURE__ */ e.jsx(p, { value: l, className: "text-sm", children: l }, l)) })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "align-content-select", className: "text-sm", children: "align-content" }),
          /* @__PURE__ */ e.jsxs(
            d,
            {
              value: a.alignContent,
              onValueChange: (l) => t({ alignContent: l }),
              children: [
                /* @__PURE__ */ e.jsx(m, { id: "align-content-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "normal" }) }),
                /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: ["normal", "stretch", "center", "flex-start", "flex-end", "space-between", "space-around", "space-evenly"].map((l) => /* @__PURE__ */ e.jsx(p, { value: l, className: "text-sm", children: l }, l)) })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "gap-input-flex", className: "text-sm", children: "gap" }),
          /* @__PURE__ */ e.jsx(
            u,
            {
              id: "gap-input-flex",
              value: a.gap,
              defaultUnit: "px",
              onChange: (l) => o((r) => ({ ...r, gap: l.target.value })),
              onCommit: (l) => t({ gap: g(l) })
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "row-gap-input-flex", className: "text-sm", children: "row-gap" }),
          /* @__PURE__ */ e.jsx(
            u,
            {
              id: "row-gap-input-flex",
              value: a.rowGap,
              defaultUnit: "px",
              onChange: (l) => o((r) => ({ ...r, rowGap: l.target.value })),
              onCommit: (l) => t({ rowGap: g(l) })
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "column-gap-input-flex", className: "text-sm", children: "column-gap" }),
          /* @__PURE__ */ e.jsx(
            u,
            {
              id: "column-gap-input-flex",
              value: a.columnGap,
              defaultUnit: "px",
              onChange: (l) => o((r) => ({ ...r, columnGap: l.target.value })),
              onCommit: (l) => t({ columnGap: g(l) })
            }
          )
        ] })
      ] }),
      s && /* @__PURE__ */ e.jsxs(
        D,
        {
          className: "w-full",
          type: "single",
          value: b,
          onValueChange: (l) => l && S(l),
          children: [
            /* @__PURE__ */ e.jsx(I, { className: "flex-1", value: "columns", children: "Columns" }),
            /* @__PURE__ */ e.jsx(I, { className: "flex-1", value: "rows", children: "Rows" })
          ]
        }
      ),
      s && /* @__PURE__ */ e.jsxs("div", { className: "grid grid-cols-2 gap-2", children: [
        (b === "columns" ? [
          ["gridTemplateColumns", "grid-template-columns"],
          ["gridColumn", "grid-column"]
        ] : [
          ["gridTemplateRows", "grid-template-rows"],
          ["gridRow", "grid-row"]
        ]).map(([l, r]) => /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: `${l}-input`, className: "text-sm", children: r }),
          /* @__PURE__ */ e.jsx(
            u,
            {
              id: `${l}-input`,
              value: a[l],
              onChange: (C) => o((P) => ({ ...P, [l]: C.target.value })),
              onCommit: (C) => t({ [l]: C })
            }
          )
        ] }, l)),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "gap-input", className: "text-sm", children: "gap" }),
          /* @__PURE__ */ e.jsx(
            u,
            {
              id: "gap-input",
              value: a.gap,
              defaultUnit: "px",
              onChange: (l) => o((r) => ({ ...r, gap: l.target.value })),
              onCommit: (l) => t({ gap: g(l) })
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "row-gap-input", className: "text-sm", children: "row-gap" }),
          /* @__PURE__ */ e.jsx(
            u,
            {
              id: "row-gap-input",
              value: a.rowGap,
              defaultUnit: "px",
              onChange: (l) => o((r) => ({ ...r, rowGap: l.target.value })),
              onCommit: (l) => t({ rowGap: g(l) })
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "column-gap-input", className: "text-sm", children: "column-gap" }),
          /* @__PURE__ */ e.jsx(
            u,
            {
              id: "column-gap-input",
              value: a.columnGap,
              defaultUnit: "px",
              onChange: (l) => o((r) => ({ ...r, columnGap: l.target.value })),
              onCommit: (l) => t({ columnGap: g(l) })
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "justify-content-grid-select", className: "text-sm", children: "justify-content" }),
          /* @__PURE__ */ e.jsxs(
            d,
            {
              value: a.justifyContent,
              onValueChange: (l) => t({ justifyContent: l }),
              children: [
                /* @__PURE__ */ e.jsx(m, { id: "justify-content-grid-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "start" }) }),
                /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: ["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"].map((l) => /* @__PURE__ */ e.jsx(p, { value: l, className: "text-sm", children: l }, l)) })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "align-content-grid-select", className: "text-sm", children: "align-content" }),
          /* @__PURE__ */ e.jsxs(
            d,
            {
              value: a.alignContent,
              onValueChange: (l) => t({ alignContent: l }),
              children: [
                /* @__PURE__ */ e.jsx(m, { id: "align-content-grid-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "start" }) }),
                /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: ["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"].map((l) => /* @__PURE__ */ e.jsx(p, { value: l, className: "text-sm", children: l }, l)) })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "justify-items-grid-select", className: "text-sm", children: "justify-items" }),
          /* @__PURE__ */ e.jsxs(
            d,
            {
              value: a.justifyItems,
              onValueChange: (l) => t({ justifyItems: l }),
              children: [
                /* @__PURE__ */ e.jsx(m, { id: "justify-items-grid-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "stretch" }) }),
                /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: ["stretch", "start", "center", "end"].map((l) => /* @__PURE__ */ e.jsx(p, { value: l, className: "text-sm", children: l }, l)) })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "align-items-grid-select", className: "text-sm", children: "align-items" }),
          /* @__PURE__ */ e.jsxs(
            d,
            {
              value: a.alignItems,
              onValueChange: (l) => t({ alignItems: l }),
              children: [
                /* @__PURE__ */ e.jsx(m, { id: "align-items-grid-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "stretch" }) }),
                /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: ["stretch", "start", "center", "end"].map((l) => /* @__PURE__ */ e.jsx(p, { value: l, className: "text-sm", children: l }, l)) })
              ]
            }
          )
        ] })
      ] }),
      i && /* @__PURE__ */ e.jsxs("div", { className: "grid grid-cols-2 gap-2", children: [
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "order-input", className: "text-sm", children: "order" }),
          /* @__PURE__ */ e.jsx(
            u,
            {
              id: "order-input",
              type: "number",
              value: a.order,
              onChange: (l) => o((r) => ({ ...r, order: l.target.value })),
              onCommit: (l) => t({ order: l })
            }
          )
        ] }),
        /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
          /* @__PURE__ */ e.jsx(n, { htmlFor: "align-self-select", className: "text-sm", children: "align-self" }),
          /* @__PURE__ */ e.jsxs(
            d,
            {
              value: a.alignSelf,
              onValueChange: (l) => t({ alignSelf: l }),
              children: [
                /* @__PURE__ */ e.jsx(m, { id: "align-self-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "auto" }) }),
                /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: ["auto", "stretch", "center", "flex-start", "flex-end", "baseline"].map((l) => /* @__PURE__ */ e.jsx(p, { value: l, className: "text-sm", children: l }, l)) })
              ]
            }
          )
        ] })
      ] })
    ] });
  }, z = () => /* @__PURE__ */ e.jsxs("div", { className: "space-y-4", children: [
    /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
      /* @__PURE__ */ e.jsx(n, { htmlFor: "overflow-select", className: "text-sm", children: "Overflow" }),
      /* @__PURE__ */ e.jsxs(
        d,
        {
          value: a.overflow,
          onValueChange: (s) => t({ overflow: s }),
          children: [
            /* @__PURE__ */ e.jsx(m, { id: "overflow-select", className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "visible" }) }),
            /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: ["visible", "hidden", "scroll", "auto", "clip", "inherit", "initial", "unset"].map((s) => /* @__PURE__ */ e.jsx(p, { value: s, className: "text-sm", children: s }, s)) })
          ]
        }
      )
    ] }),
    /* @__PURE__ */ e.jsx("div", { className: "grid grid-cols-2 gap-2", children: [
      ["overflowX", "overflow-x"],
      ["overflowY", "overflow-y"]
    ].map(([s, i]) => /* @__PURE__ */ e.jsxs("div", { className: "flex flex-col space-y-1", children: [
      /* @__PURE__ */ e.jsx(n, { htmlFor: `${s}-select`, className: "text-sm", children: i }),
      /* @__PURE__ */ e.jsxs(
        d,
        {
          value: a[s],
          onValueChange: (l) => t({ [s]: l }),
          children: [
            /* @__PURE__ */ e.jsx(m, { id: `${s}-select`, className: "w-full h-8", children: /* @__PURE__ */ e.jsx(x, { placeholder: "visible" }) }),
            /* @__PURE__ */ e.jsx(h, { container: c, sideOffset: 8, children: ["visible", "hidden", "scroll", "auto", "clip", "inherit", "initial", "unset"].map((l) => /* @__PURE__ */ e.jsx(p, { value: l, className: "text-sm", children: l }, l)) })
          ]
        }
      )
    ] }, s)) })
  ] });
  return /* @__PURE__ */ e.jsxs("div", { className: "flex items-center space-x-2", children: [
    /* @__PURE__ */ e.jsx(
      y,
      {
        id: "display-input",
        className: "w-[120px] h-8",
        value: a.display,
        placeholder: "display",
        onChange: (s) => o((i) => ({ ...i, display: s.target.value })),
        onCommit: (s) => t({ display: s }),
        popoverContent: R(),
        container: c,
        topLabel: "Display"
      }
    ),
    /* @__PURE__ */ e.jsx(
      y,
      {
        id: "position-input",
        className: "w-[120px] h-8",
        value: a.position,
        placeholder: "position",
        onChange: (s) => o((i) => ({ ...i, position: s.target.value })),
        onCommit: (s) => t({ position: s }),
        popoverContent: T(),
        container: c,
        topLabel: "Position"
      }
    ),
    /* @__PURE__ */ e.jsx(
      y,
      {
        id: "overflow-input",
        className: "w-[120px] h-8",
        value: a.overflow,
        placeholder: "overflow",
        onChange: (s) => o((i) => ({ ...i, overflow: s.target.value })),
        onCommit: (s) => t({ overflow: s }),
        popoverContent: z(),
        container: c,
        topLabel: "Overflow"
      }
    )
  ] });
};
export {
  q as default
};
