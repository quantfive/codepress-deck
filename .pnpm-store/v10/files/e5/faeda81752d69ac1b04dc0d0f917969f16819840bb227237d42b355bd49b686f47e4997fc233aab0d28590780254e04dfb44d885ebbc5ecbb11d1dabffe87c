import { getSentryCarrier as l } from "./index202.js";
import { dsnToString as p } from "./index194.js";
import { normalize as d } from "./index133.js";
import { GLOBAL_OBJ as y } from "./index117.js";
function h(e, t = []) {
  return [e, t];
}
function E(e, t) {
  const [o, n] = e;
  return [o, [...n, t]];
}
function S(e, t) {
  const o = e[1];
  for (const n of o) {
    const r = n[0].type;
    if (t(n, r))
      return !0;
  }
  return !1;
}
function c(e) {
  const t = l(y);
  return t.encodePolyfill ? t.encodePolyfill(e) : new TextEncoder().encode(e);
}
function k(e) {
  const [t, o] = e;
  let n = JSON.stringify(t);
  function r(i) {
    typeof n == "string" ? n = typeof i == "string" ? n + i : [c(n), i] : n.push(typeof i == "string" ? c(i) : i);
  }
  for (const i of o) {
    const [f, s] = i;
    if (r(`
${JSON.stringify(f)}
`), typeof s == "string" || s instanceof Uint8Array)
      r(s);
    else {
      let a;
      try {
        a = JSON.stringify(s);
      } catch {
        a = JSON.stringify(d(s));
      }
      r(a);
    }
  }
  return typeof n == "string" ? n : u(n);
}
function u(e) {
  const t = e.reduce((r, i) => r + i.length, 0), o = new Uint8Array(t);
  let n = 0;
  for (const r of e)
    o.set(r, n), n += r.length;
  return o;
}
function A(e) {
  const t = typeof e.data == "string" ? c(e.data) : e.data;
  return [
    {
      type: "attachment",
      length: t.length,
      filename: e.filename,
      content_type: e.contentType,
      attachment_type: e.attachmentType
    },
    t
  ];
}
const m = {
  session: "session",
  sessions: "session",
  attachment: "attachment",
  transaction: "transaction",
  event: "error",
  client_report: "internal",
  user_report: "default",
  profile: "profile",
  profile_chunk: "profile",
  replay_event: "replay",
  replay_recording: "replay",
  check_in: "monitor",
  feedback: "feedback",
  span: "span",
  raw_security: "security",
  log: "log_item"
};
function I(e) {
  return m[e];
}
function O(e) {
  if (!e?.sdk)
    return;
  const { name: t, version: o } = e.sdk;
  return { name: t, version: o };
}
function P(e, t, o, n) {
  const r = e.sdkProcessingMetadata?.dynamicSamplingContext;
  return {
    event_id: e.event_id,
    sent_at: (/* @__PURE__ */ new Date()).toISOString(),
    ...t && { sdk: t },
    ...!!o && n && { dsn: p(n) },
    ...r && {
      trace: r
    }
  };
}
export {
  E as addItemToEnvelope,
  A as createAttachmentEnvelopeItem,
  h as createEnvelope,
  P as createEventEnvelopeHeaders,
  I as envelopeItemTypeToDataCategory,
  S as forEachEnvelopeItem,
  O as getSdkMetadataForEnvelopeHeader,
  k as serializeEnvelope
};
