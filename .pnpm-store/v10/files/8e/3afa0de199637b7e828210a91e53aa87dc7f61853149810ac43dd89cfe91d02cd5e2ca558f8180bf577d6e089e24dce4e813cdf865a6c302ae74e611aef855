import { jsxs as _jsxs, jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { createApiKey, getApiKeys, revokeApiKey } from "@/lib/github/fetch";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import logger from "@/lib/logger";
import Sentry from "@/sentry";
export default function ApiKeyGenerator({ organizationId, organizationName, repositoryName, }) {
    const [isGenerating, setIsGenerating] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [generatedKey, setGeneratedKey] = useState(null);
    const [existingKeys, setExistingKeys] = useState([]);
    const [error, setError] = useState(null);
    const [copySuccess, setCopySuccess] = useState(false);
    const [copiedKeyId, setCopiedKeyId] = useState(null);
    // Fetch existing API keys when component mounts or organizationId changes
    useEffect(() => {
        async function fetchExistingKeys() {
            if (organizationId) {
                setIsLoading(true);
                setError(null);
                try {
                    const keys = await getApiKeys(organizationId);
                    logger.debug("Existing API keys:", keys);
                    // Log each key to check if the key value is included
                    keys.forEach((key) => {
                        logger.debug(`API Key ${key.id}:`, key.key ? `Has key value` : `No key value`);
                    });
                    setExistingKeys(keys);
                }
                catch (err) {
                    logger.error("Error fetching API keys:", err);
                    Sentry.captureException(err);
                    setError("Failed to fetch existing API keys");
                }
                finally {
                    setIsLoading(false);
                }
            }
        }
        fetchExistingKeys();
    }, [organizationId]);
    const handleGenerateKey = async () => {
        setIsGenerating(true);
        setError(null);
        try {
            logger.debug("Creating API key for organization:", organizationId);
            // Just pass the organization ID, no need for name
            const result = await createApiKey(organizationId);
            logger.debug("API key creation result:", result);
            setGeneratedKey(result);
            // Refresh the list of keys
            const keys = await getApiKeys(organizationId);
            setExistingKeys(keys);
        }
        catch (err) {
            logger.error("Error generating API key:", err);
            Sentry.captureException(err);
            // Log the full error for debugging
            if (err instanceof Error) {
                logger.error("Error details:", err);
            }
            else if (typeof err === "object") {
                logger.error("Error object:", JSON.stringify(err, null, 2));
            }
            setError(err instanceof Error ? err.message : "Failed to generate API key");
        }
        finally {
            setIsGenerating(false);
        }
    };
    const handleRevokeKey = async (keyId) => {
        if (!confirm("Are you sure you want to revoke this API key? This cannot be undone.")) {
            return;
        }
        try {
            await revokeApiKey(organizationId, keyId);
            // Remove the key from the list
            setExistingKeys(existingKeys.filter((key) => key.id !== keyId));
        }
        catch (err) {
            logger.error("Error revoking API key:", err);
            Sentry.captureException(err);
            setError("Failed to revoke API key");
        }
    };
    const copyToClipboard = () => {
        if (generatedKey) {
            navigator.clipboard.writeText(generatedKey.key);
            setCopySuccess(true);
            setTimeout(() => setCopySuccess(false), 2000);
        }
    };
    const copyKeyIdToClipboard = (keyId) => {
        // Find the key with the matching ID
        const apiKey = existingKeys.find((k) => k.id === keyId);
        // Use the actual key if available, otherwise use the key ID format
        const textToCopy = apiKey?.key || `key_${keyId}`;
        navigator.clipboard.writeText(textToCopy);
        setCopiedKeyId(keyId);
        setTimeout(() => setCopiedKeyId(null), 2000);
    };
    return (_jsxs("div", { className: "py-2", children: [_jsxs("h3", { className: "text-sm font-medium mb-2", children: ["API Keys for ", organizationName, repositoryName && (_jsxs("span", { className: "text-xs text-gray-500 ml-1", children: ["(", repositoryName, ")"] }))] }), generatedKey ? (_jsxs(Card, { className: "p-4 bg-green-50 border-green-200 mb-4", children: [_jsx("h4", { className: "text-sm font-semibold text-green-800", children: "API Key Generated!" }), _jsx("p", { className: "text-xs text-gray-600 mb-2", children: "This key will only be shown once. Copy it now." }), _jsxs("div", { className: "mt-2 mb-3", children: [_jsx("div", { className: "font-medium text-xs mb-1", children: "API Key:" }), _jsxs("div", { className: "flex items-center", children: [_jsx(Input, { readOnly: true, value: generatedKey.key, className: "text-xs font-mono bg-white border-gray-300" }), _jsx(Button, { onClick: copyToClipboard, className: "ml-2 h-8 bg-blue-600 hover:bg-blue-700", size: "sm", children: copySuccess ? "Copied!" : "Copy" })] })] }), _jsxs("div", { className: "mt-4 border-t border-green-200 pt-3 text-xs text-gray-700", children: [_jsx("h5", { className: "font-semibold", children: "How to use this key:" }), _jsx("p", { className: "mb-1", children: "Add to your build configuration:" }), _jsxs("pre", { className: "bg-gray-100 p-2 rounded text-xs font-mono overflow-x-auto", children: ["CODEPRESS_API_TOKEN=", generatedKey.key] }), _jsx("p", { className: "mt-2", children: "Or in your babel.config.js:" }), _jsx("pre", { className: "bg-gray-100 p-2 rounded text-xs font-mono overflow-x-auto", children: `plugins: [
  ['codepress-html-babel-plugin', {
    apiToken: '${generatedKey.key}'
  }]
]` })] }), _jsx(Button, { onClick: () => setGeneratedKey(null), className: "mt-3 w-full h-8 bg-green-600 hover:bg-green-700", size: "sm", children: "Done" })] })) : (_jsxs(_Fragment, { children: [error && _jsx("p", { className: "text-xs text-red-600 mb-2", children: error }), _jsx(Button, { onClick: handleGenerateKey, disabled: isGenerating, className: "w-full h-8 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300", size: "sm", children: isGenerating ? "Generating..." : "Generate API Key" }), _jsx("p", { className: "text-xs text-gray-500 mt-2", children: "This will create an API key with file_mappings permission for use in CI/CD or build systems." })] })), _jsxs("div", { className: "mt-4 pt-3 border-t", children: [_jsx("h4", { className: "text-sm font-medium mb-2", children: "Existing API Keys" }), isLoading ? (_jsx("p", { className: "text-xs text-gray-500", children: "Loading keys..." })) : existingKeys.length > 0 ? (_jsx("div", { className: "space-y-2", children: existingKeys.map((key) => (_jsxs("div", { className: "border rounded-md p-2 text-xs", children: [_jsx("div", { className: "font-medium mb-1", children: "API Key" }), _jsxs("div", { className: "flex items-center mb-2", children: [_jsx(Input, { readOnly: true, value: key.key || `key_${key.id}`, className: "text-xs font-mono bg-white border-gray-300 h-7" }), _jsx(Button, { onClick: () => copyKeyIdToClipboard(key.id), className: "ml-2 h-7 bg-blue-600 hover:bg-blue-700", size: "sm", children: copiedKeyId === key.id ? "Copied!" : "Copy" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("div", { children: [_jsxs("div", { className: "text-gray-500 text-xs", children: ["Created: ", new Date(key.created_at).toLocaleString()] }), key.last_used_at && (_jsxs("div", { className: "text-gray-500 text-xs", children: ["Last used: ", new Date(key.last_used_at).toLocaleString()] }))] }), _jsx(Button, { onClick: () => handleRevokeKey(key.id), variant: "destructive", size: "sm", className: "h-6 text-xs ml-2", children: "Revoke" })] })] }, key.id))) })) : (_jsx("p", { className: "text-xs text-gray-500", children: "No existing API keys found." }))] }), _jsx("div", { className: "mt-3 text-xs text-gray-600", children: _jsx("p", { children: "API keys allow your build systems to securely upload file mappings to CodePress, enabling the browser extension to locate source files when editing your website." }) })] }));
}
