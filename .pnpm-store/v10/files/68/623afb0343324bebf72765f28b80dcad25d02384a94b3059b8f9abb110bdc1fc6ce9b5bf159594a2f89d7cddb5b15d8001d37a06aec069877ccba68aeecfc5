import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { useAuth } from "@/lib/auth";
import { getBrowserAPI } from "@/lib/utils";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faSpinner } from "@fortawesome/pro-solid-svg-icons";
import { faGithub } from "@fortawesome/free-brands-svg-icons";
import logger from "@/lib/logger";
import Sentry from "@/sentry";
const GitHubLogin = ({ onSuccess, onError }) => {
    const { isLoggedIn, user, loading, updateUser } = useAuth();
    const [authLoading, setAuthLoading] = useState(false);
    const handleLogin = async () => {
        try {
            setAuthLoading(true);
            // Send message to background script to start OAuth flow
            const browserAPI = getBrowserAPI();
            if (!browserAPI || !browserAPI.runtime) {
                throw new Error("Browser extension API not available");
            }
            const response = await new Promise((resolve, reject) => {
                browserAPI.runtime.sendMessage({ type: "START_GITHUB_AUTH" }, (response) => {
                    // Check for browserAPI.runtime.lastError which indicates a messaging error
                    if (browserAPI.runtime.lastError) {
                        reject(new Error(browserAPI.runtime.lastError.message ||
                            "Failed to communicate with the extension"));
                        return;
                    }
                    resolve(response);
                });
            });
            logger.debug("GitHub auth response:", response);
            if (response?.success && response?.authState?.user) {
                // Update the auth context with the user data from the response
                updateUser({ user: response.authState.user, isLoggedIn: true });
                onSuccess?.();
            }
            else {
                onError?.(response?.error || "Authentication failed");
            }
        }
        catch (error) {
            logger.error("Login error:", error);
            Sentry.captureException(error);
            const errorMessage = error instanceof Error ? error.message : "Authentication failed";
            onError?.(errorMessage);
        }
        finally {
            setAuthLoading(false);
        }
    };
    if (loading) {
        return (_jsxs("div", { className: "flex items-center justify-center p-4", children: [_jsx(FontAwesomeIcon, { icon: faSpinner, className: "animate-spin mr-2" }), _jsx("span", { children: "Loading authentication state..." })] }));
    }
    if (isLoggedIn && user) {
        return (_jsxs("div", { className: "flex justify-center items-center p-4 bg-white border border-gray-200 shadow-sm rounded-md hover:shadow-md transition-shadow duration-200", children: [_jsx("img", { src: user.avatar_url, alt: `${user.name || user.login}'s avatar`, className: "w-10 h-10 rounded-full mr-3 ring-2 ring-blue-100" }), _jsx("div", { className: "text-sm text-gray-500 truncate", children: user.email || `@${user.login}` })] }));
    }
    return (_jsxs("button", { disabled: authLoading, onClick: handleLogin, className: "flex items-center justify-center w-full py-3 px-4 bg-[#24292e] text-white font-medium rounded-md shadow-md hover:bg-[#1b1f23] transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 border border-[#1b1f23] disabled:opacity-50 disabled:cursor-not-allowed", children: [authLoading ? (_jsx(FontAwesomeIcon, { icon: faSpinner, className: "animate-spin mr-2 text-lg" })) : (_jsx(FontAwesomeIcon, { icon: faGithub, className: "mr-2 text-lg" })), _jsx("span", { className: "text-base", children: authLoading ? "Connecting..." : "Login with GitHub" })] }));
};
export default GitHubLogin;
