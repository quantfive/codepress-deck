export declare const TOKEN_STORAGE_KEY = "github_oauth_token";
/**
 * Generate a complete API URL from a path
 */
export declare function generateApiUrl(path: string): string;
export declare function generateDirectApiUrl(path: string): string;
/**
 * Get the current authorization token from background script
 */
export declare function getAuthToken(): Promise<string | null>;
/**
 * Build request headers including authorization if token is available
 */
export declare function buildHeaders(options?: {
    includeAuth?: boolean;
    contentType?: string | null;
    additionalHeaders?: Record<string, string>;
    token?: string;
}): Promise<Record<string, string>>;
/**
 * Create a config object for GET requests
 */
export declare function GET_CONFIG(options?: {
    includeAuth?: boolean;
    additionalHeaders?: Record<string, string>;
    token?: string;
}): Promise<RequestInit>;
/**
 * Create a config object for POST requests
 */
export declare function POST_CONFIG(options?: {
    data?: any;
    includeAuth?: boolean;
    contentType?: string | null;
    additionalHeaders?: Record<string, string>;
    token?: string;
}): Promise<RequestInit>;
/**
 * Create a config object for PUT requests
 */
export declare function PUT_CONFIG(options?: {
    data?: any;
    includeAuth?: boolean;
    contentType?: string | null;
    additionalHeaders?: Record<string, string>;
    token?: string;
}): Promise<RequestInit>;
/**
 * Create a config object for PATCH requests
 */
export declare function PATCH_CONFIG(options?: {
    data?: any;
    includeAuth?: boolean;
    contentType?: string | null;
    additionalHeaders?: Record<string, string>;
    token?: string;
}): Promise<RequestInit>;
/**
 * Create a config object for DELETE requests
 */
export declare function DELETE_CONFIG(options?: {
    includeAuth?: boolean;
    additionalHeaders?: Record<string, string>;
    token?: string;
}): Promise<RequestInit>;
/**
 * Wrapper for fetch API that handles common errors and response parsing
 * Also handles automatic JWT token refresh
 * Automatically uses direct fetch for streaming requests
 */
export declare function apiFetch(url: string, config?: RequestInit): Promise<Response>;
/**
 * Logout functionality for browser extension
 */
export declare function logout(): Promise<void>;
/**
 * Logout from all devices
 */
export declare function logoutAll(): Promise<void>;
/**
 * Add non-GitHub API methods here, for example:
 *
 * export async function fetchUserPreferences() {...}
 * export async function updateAppSettings(settings: any) {...}
 * etc.
 */
//# sourceMappingURL=fetch.d.ts.map