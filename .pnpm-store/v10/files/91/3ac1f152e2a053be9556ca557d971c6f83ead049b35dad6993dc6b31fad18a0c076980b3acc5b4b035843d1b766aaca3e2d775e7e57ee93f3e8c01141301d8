import { DEBUG_BUILD as p } from "./index208.js";
import { htmlTreeAsString as y } from "./index118.js";
import { debug as u } from "./index151.js";
import { isError as l, isEvent as a, isInstanceOf as d, isElement as g } from "./index132.js";
import { truncate as c } from "./index152.js";
function P(t, e, r) {
  if (!(e in t))
    return;
  const o = t[e];
  if (typeof o != "function")
    return;
  const n = r(o);
  typeof n == "function" && _(n, o);
  try {
    t[e] = n;
  } catch {
    p && u.log(`Failed to replace method "${e}" in object`, t);
  }
}
function m(t, e, r) {
  try {
    Object.defineProperty(t, e, {
      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it
      value: r,
      writable: !0,
      configurable: !0
    });
  } catch {
    p && u.log(`Failed to add non-enumerable property "${e}" to object`, t);
  }
}
function _(t, e) {
  try {
    const r = e.prototype || {};
    t.prototype = e.prototype = r, m(t, "__sentry_original__", e);
  } catch {
  }
}
function w(t) {
  return t.__sentry_original__;
}
function b(t) {
  if (l(t))
    return {
      message: t.message,
      name: t.name,
      stack: t.stack,
      ...f(t)
    };
  if (a(t)) {
    const e = {
      type: t.type,
      target: s(t.target),
      currentTarget: s(t.currentTarget),
      ...f(t)
    };
    return typeof CustomEvent < "u" && d(t, CustomEvent) && (e.detail = t.detail), e;
  } else
    return t;
}
function s(t) {
  try {
    return g(t) ? y(t) : Object.prototype.toString.call(t);
  } catch {
    return "<unknown>";
  }
}
function f(t) {
  if (typeof t == "object" && t !== null) {
    const e = {};
    for (const r in t)
      Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
    return e;
  } else
    return {};
}
function F(t, e = 40) {
  const r = Object.keys(b(t));
  r.sort();
  const o = r[0];
  if (!o)
    return "[object has no keys]";
  if (o.length >= e)
    return c(o, e);
  for (let n = r.length; n > 0; n--) {
    const i = r.slice(0, n).join(", ");
    if (!(i.length > e))
      return n === r.length ? i : c(i, e);
  }
  return "";
}
export {
  m as addNonEnumerableProperty,
  b as convertToPlainObject,
  F as extractExceptionKeysForMessage,
  P as fill,
  w as getOriginalFunction,
  _ as markFunctionWrapped
};
