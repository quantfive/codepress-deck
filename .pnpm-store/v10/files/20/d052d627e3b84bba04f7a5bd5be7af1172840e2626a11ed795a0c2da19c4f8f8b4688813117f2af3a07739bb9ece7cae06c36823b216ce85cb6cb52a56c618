import { addNonEnumerableProperty as i } from "./index119.js";
import { GLOBAL_OBJ as c } from "./index117.js";
function s() {
  const t = c;
  return t.crypto || t.msCrypto;
}
function l(t = s()) {
  let n = () => Math.random() * 16;
  try {
    if (t?.randomUUID)
      return t.randomUUID().replace(/-/g, "");
    t?.getRandomValues && (n = () => {
      const e = new Uint8Array(1);
      return t.getRandomValues(e), e[0];
    });
  } catch {
  }
  return ("10000000100040008000" + 1e11).replace(
    /[018]/g,
    (e) => (
      // eslint-disable-next-line no-bitwise
      (e ^ (n() & 15) >> e / 4).toString(16)
    )
  );
}
function o(t) {
  return t.exception?.values?.[0];
}
function m(t) {
  const { message: n, event_id: e } = t;
  if (n)
    return n;
  const r = o(t);
  return r ? r.type && r.value ? `${r.type}: ${r.value}` : r.type || r.value || e || "<unknown>" : e || "<unknown>";
}
function y(t, n, e) {
  const r = t.exception = t.exception || {}, u = r.values = r.values || [], a = u[0] = u[0] || {};
  a.value || (a.value = n || ""), a.type || (a.type = "Error");
}
function g(t, n) {
  const e = o(t);
  if (!e)
    return;
  const r = { type: "generic", handled: !0 }, u = e.mechanism;
  if (e.mechanism = { ...r, ...u, ...n }, n && "data" in n) {
    const a = { ...u?.data, ...n.data };
    e.mechanism.data = a;
  }
}
function _(t) {
  if (d(t))
    return !0;
  try {
    i(t, "__sentry_captured__", !0);
  } catch {
  }
  return !1;
}
function d(t) {
  try {
    return t.__sentry_captured__;
  } catch {
  }
}
export {
  g as addExceptionMechanism,
  y as addExceptionTypeValue,
  _ as checkOrSetAlreadyCaught,
  m as getEventDescription,
  l as uuid4
};
