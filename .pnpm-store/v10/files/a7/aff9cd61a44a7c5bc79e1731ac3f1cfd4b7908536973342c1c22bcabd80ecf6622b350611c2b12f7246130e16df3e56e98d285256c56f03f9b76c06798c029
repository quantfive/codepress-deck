import { j as n } from "./index7.js";
import A, { useState as k, useEffect as q } from "react";
import { POST_CONFIG as U, apiFetch as V } from "./index38.js";
import { detectRepositoryInfo as ce } from "./index29.js";
import { useVisualEditor as de } from "./index6.js";
import { getCleanElementHTML as ue } from "./index15.js";
import { checkGithubMode as Q, API_BASE_URL as X, BASE_LOCAL_CODEPRESS_DEPRECATED as Z } from "./index26.js";
import { useDeployment as me } from "./index8.js";
import { sanitizeBranchName as ee, checkIsOnCodepressBranch as he } from "./index60.js";
import { logger as te } from "./index12.js";
import { toast as ne } from "./index23.js";
import fe from "./index62.js";
import ge from "./index225.js";
import pe from "./index180.js";
const $e = ({ onClose: se }) => {
  const { activeElementFpId: p, trackedElements: M } = de(), [C, u] = k([]), [$, j] = k(""), [re, P] = k(!1), [G, R] = k(!0), f = ce(), b = A.useCallback(() => `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`, []), { branchName: L, fetchPreviewData: ae, setShowDeploymentPopover: F } = me(), O = A.useRef(null), [D, W] = k(!0), B = A.useRef(!1), E = A.useCallback(() => {
    const e = O.current;
    if (e) {
      B.current = !0;
      try {
        e.scrollTo({ top: e.scrollHeight, behavior: "smooth" });
      } catch {
        e.scrollTop = e.scrollHeight, B.current = !1;
      }
    }
  }, []);
  q(() => {
    D && E();
  }, [C.length, E, D]), q(() => {
    const e = O.current;
    if (!e) return;
    const s = () => {
      const r = e.scrollHeight - e.scrollTop - e.clientHeight <= 8;
      if (B.current) {
        r && (B.current = !1, W(!0));
        return;
      }
      W(r);
    };
    return e.addEventListener("scroll", s), s(), () => e.removeEventListener("scroll", s);
  }, []);
  const oe = A.useCallback(() => {
    W(!0), E();
  }, [E]), ie = () => {
    const [e, s] = k(0);
    return q(() => {
      const o = setInterval(() => {
        s((r) => (r + 1) % 4);
      }, 500);
      return () => clearInterval(o);
    }, []), /* @__PURE__ */ n.jsx("span", { children: ".".repeat(e) });
  }, le = ({ message: e, isActive: s }) => {
    const { role: o, content: r, loading: a } = e, t = e.type === "final_result" ? "text-gray-900" : "text-gray-400";
    return /* @__PURE__ */ n.jsxs("div", { className: "text-gray-900", children: [
      /* @__PURE__ */ n.jsxs("span", { className: "font-semibold mr-1", children: [
        o === "user" ? "You" : "Agent",
        ":"
      ] }),
      a ? /* @__PURE__ */ n.jsx(ie, {}) : s && o === "assistant" ? /* @__PURE__ */ n.jsx(
        ge,
        {
          text: r,
          disabled: !G,
          animationDuration: 1.5,
          windowWidth: 5
        }
      ) : /* @__PURE__ */ n.jsx(
        "span",
        {
          className: `whitespace-pre-wrap ${o === "assistant" ? t : ""}`,
          children: r
        }
      )
    ] });
  }, Y = async (e, s = !1) => {
    const o = Q(), r = $.trim();
    if (!(!r || !p)) {
      j(""), P(!0), R(!1), u((a) => [
        ...a,
        { id: b(), role: "user", content: r }
      ]);
      try {
        const a = ee(L), t = o ? `${X}/code-sync/agent-changes-commit` : `${Z}/visual-editor-api-agent`, m = o ? {
          encoded_location: p,
          github_repo_name: f?.repository,
          user_instruction: r,
          additional_context: {
            browserWidth: window.innerWidth,
            browserHeight: window.innerHeight
          },
          githubBaseBranchName: f?.branch,
          githubBranchName: a || f?.branch
        } : {
          encoded_location: p,
          file_content: M[p]?.originalHtml || "",
          github_repo_name: f?.repository,
          user_instruction: r,
          branch_name: a || f?.branch
        }, y = await U({
          data: m,
          includeAuth: !0
        });
        y.headers = {
          ...y.headers,
          Accept: "text/event-stream",
          "Cache-Control": "no-cache"
        };
        const g = await V(t, y);
        if (!g.ok)
          throw new Error(
            `Request failed: ${g.status} ${g.statusText}`
          );
        const h = g.body?.getReader(), _ = new TextDecoder();
        if (console.log("Starting to read streaming response..."), h) {
          let i = "";
          try {
            for (; ; ) {
              const { done: N, value: S } = await h.read();
              if (N) break;
              i += _.decode(S, { stream: !0 });
              let d = i.indexOf(`

`);
              for (; d !== -1; ) {
                const w = i.slice(0, d);
                i = i.slice(d + 2), d = i.indexOf(`

`);
                const v = [];
                for (const c of w.split(`
`))
                  c.startsWith("data: ") && v.push(c.slice(6));
                if (v.length === 0) continue;
                const K = v.join(`
`);
                let l;
                try {
                  l = JSON.parse(K);
                } catch {
                  console.warn("Skipping malformed SSE data:", K);
                  continue;
                }
                if (l.type === "error") {
                  u((c) => [
                    ...c.filter((x) => !x.ephemeral),
                    {
                      id: b(),
                      role: "assistant",
                      content: `❌ Error: ${l.error}`,
                      ephemeral: !1
                    }
                  ]);
                  return;
                }
                if (l.type === "complete")
                  return;
                if (l.type === "tool_end" || l.type === "output_delta")
                  continue;
                const H = l.message || l.content || "";
                if (l.ephemeral)
                  l.type === "reasoning_delta" ? (u((c) => {
                    const x = [...c];
                    let I = -1;
                    for (let T = x.length - 1; T >= 0; T--) {
                      const z = x[T];
                      if (z.role === "assistant" && z.ephemeral && z.type === "reasoning") {
                        I = T;
                        break;
                      }
                    }
                    return I >= 0 ? (x[I] = {
                      ...x[I],
                      content: (x[I].content || "") + H
                    }, x) : [
                      ...x,
                      {
                        id: b(),
                        role: "assistant",
                        content: H || "",
                        ephemeral: !0,
                        type: "reasoning"
                      }
                    ];
                  }), D && setTimeout(E, 0)) : u((c) => [
                    ...c,
                    {
                      id: b(),
                      role: "assistant",
                      content: H || "Processing...",
                      ephemeral: !0,
                      type: l.type
                    }
                  ]), R(!0);
                else if (u((c) => [
                  ...c,
                  {
                    id: b(),
                    role: "assistant",
                    content: H || "✅ Changes applied successfully!",
                    ephemeral: !1,
                    type: l.type
                  }
                ]), l.type === "final_result" && R(!1), o && l.success) {
                  const c = await ae(a);
                  F(c);
                }
              }
            }
          } finally {
            h.releaseLock();
          }
        }
      } catch (a) {
        if (a?.message?.includes("streaming") || a?.message?.includes("text/event-stream")) {
          console.warn("Streaming failed, falling back to non-streaming mode");
          try {
            await J(e, s);
            return;
          } catch (t) {
            u((m) => [
              ...m.filter((y) => !y.ephemeral),
              {
                id: b(),
                role: "assistant",
                content: `❌ Error: ${t?.message || String(t)}`,
                ephemeral: !1
              }
            ]);
          }
        } else
          u((t) => [
            ...t.filter((m) => !m.ephemeral),
            {
              id: b(),
              role: "assistant",
              content: `❌ Error: ${a?.message || String(a)}`,
              ephemeral: !1
            }
          ]);
      } finally {
        P(!1), j("");
      }
    }
  }, J = async (e, s = !1) => {
    const o = Q(), r = $.trim();
    if (!(!r || !p)) {
      j(""), P(!0), R(!1), u((a) => [
        ...a,
        { id: b(), role: "user", content: r },
        {
          id: b(),
          role: "assistant",
          content: "",
          loading: !0
        }
      ]);
      try {
        const a = o ? `${X}/code-sync/agent-changes-commit` : `${Z}/visual-editor-api-agent`, t = M[p]?.originalHtml, m = M[p]?.element, y = m ? ue(m, !1) : t;
        let g;
        const h = ee(L);
        if (h !== L && (ne.warning("We tweaked your save name", {
          id: "nameTweak",
          description: "Invalid characters were removed."
        }), te.log("Your save name has been sanitized")), o) {
          if (!s && he(h)) {
            ne.warning("Save Confirmation", {
              id: "saveConfirmation",
              description: `You are making a change to an agent change on ${h}`,
              action: {
                label: "Confirm",
                onClick: () => J(e, !0)
              },
              duration: 1 / 0
            }), u(
              (d) => d.map(
                (w, v) => v === d.length - 1 ? {
                  ...w,
                  loading: !1,
                  content: "Are you sure you want to save on this branch? Please confirm in the toast or switch branches in the save bar below"
                } : w
              )
            );
            return;
          }
          g = {
            encoded_location: p,
            github_repo_name: f?.repository,
            user_instruction: r,
            additional_context: {
              browserWidth: window.innerWidth,
              browserHeight: window.innerHeight
            },
            githubBaseBranchName: f?.branch,
            githubBranchName: h || f?.branch
          };
        } else
          g = {
            encoded_location: p,
            file_content: t || "",
            github_repo_name: f?.repository,
            user_instruction: r,
            branch_name: h || f?.branch
          };
        const _ = await V(
          a,
          await U({ data: g, includeAuth: !0 })
        );
        if (!_.ok)
          throw new Error(`Request failed: ${_.status} ${_.statusText}`);
        const i = await _.json();
        let N, S = "";
        if (o && i.success) {
          const d = await getPreviewLink({ branchName: h });
          F({ ...d, branch_name: h }), N = `✅ Changes made successfully!
${i.message}`, S = `✅ Changes committed successfully!
${i.message}`, i.pr_url && (S += `

🔗 View Pull Request: ${i.pr_url}`), i.updated_files && i.updated_files.length > 0 && (S += `

📝 Updated files: ${i.updated_files.join(", ")}`);
        } else
          N = i?.message || "Changes applied locally. Review the result in your editor.";
        te.log(S), u(
          (d) => d.map(
            (w, v) => v === d.length - 1 ? { ...w, loading: !1, content: N } : w
          )
        ), j("");
      } catch (a) {
        let t = a?.message || String(a);
        o && (t.includes("Invalid github_repo_name") ? t = "Please check the repository name format (owner/repo)" : t.includes("Repository") && t.includes("not found") ? t = "Repository not found. Please check the repository name and permissions." : t.includes("Invalid encoded location") ? t = "Invalid file location. Please try again." : t.includes("Agent processing failed") ? t = "AI processing failed. Please try again or simplify your request." : t.includes("GitHub") && (t = "GitHub integration error. Please check your permissions.")), u(
          (m) => m.map(
            (y, g) => g === m.length - 1 ? { ...y, loading: !1, content: `❌ Error: ${t}` } : y
          )
        );
      } finally {
        P(!1);
      }
    }
  };
  return /* @__PURE__ */ n.jsxs(
    "div",
    {
      onMouseDown: (e) => e.stopPropagation(),
      className: "relative mt-2 w-[300px] border rounded-md overflow-hidden shadow-lg bg-white flex flex-col max-h-[50vh]",
      children: [
        /* @__PURE__ */ n.jsxs("div", { className: "px-3 py-2 bg-gray-50 border-b", children: [
          /* @__PURE__ */ n.jsxs("div", { className: "flex items-center justify-between mb-2", children: [
            /* @__PURE__ */ n.jsx("div", { className: "text-sm font-medium", children: "AI Edit" }),
            /* @__PURE__ */ n.jsx(
              "button",
              {
                onClick: se,
                className: "text-xs px-2 py-1 rounded bg-gray-200 hover:bg-gray-300",
                children: "Close"
              }
            )
          ] }),
          /* @__PURE__ */ n.jsxs("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ n.jsx("span", { className: "text-xs text-gray-600 flex-shrink-0", children: "Save to:" }),
            /* @__PURE__ */ n.jsx(fe, {})
          ] })
        ] }),
        /* @__PURE__ */ n.jsxs(
          "div",
          {
            ref: O,
            className: "relative flex-1 overflow-auto p-3 space-y-2 text-sm select-text",
            children: [
              C.length === 0 && /* @__PURE__ */ n.jsx("div", { className: "text-gray-500", children: "Describe the change you want to make to the selected element." }),
              (() => {
                const e = (() => {
                  for (let s = C.length - 1; s >= 0; s--)
                    if (C[s]?.ephemeral) return s;
                  return -1;
                })();
                return C.map((s, o) => {
                  const r = G && o === e && s.role === "assistant";
                  return /* @__PURE__ */ n.jsx(le, { message: s, isActive: r }, s.id);
                });
              })()
            ]
          }
        ),
        !D && /* @__PURE__ */ n.jsx(
          "button",
          {
            onClick: oe,
            className: "absolute right-3 bottom-34 z-10 text-xs px-2 py-1 rounded bg-gray-200 hover:bg-gray-300 text-gray-800 shadow pointer-events-auto",
            children: "Jump to latest"
          }
        ),
        /* @__PURE__ */ n.jsx("div", { className: "p-3 border-t", children: /* @__PURE__ */ n.jsxs("div", { className: "relative flex", children: [
          /* @__PURE__ */ n.jsx(
            "textarea",
            {
              className: "w-full border rounded px-2 py-2 pr-10 text-sm focus:outline-none focus:ring min-h-[100px] resize-none",
              placeholder: "e.g. Make this button use a green background on hover",
              value: $,
              rows: 3,
              onChange: (e) => j(e.target.value),
              onKeyDown: (e) => {
                e.key === "Enter" && !e.shiftKey && (e.preventDefault(), Y(e));
              }
            }
          ),
          /* @__PURE__ */ n.jsx(
            "button",
            {
              onClick: Y,
              disabled: re || !$.trim(),
              "aria-label": "Send message",
              className: "absolute bottom-2 right-2 h-8 w-8 inline-flex items-center justify-center rounded-md bg-blue-600 text-white disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-700",
              children: /* @__PURE__ */ n.jsx(pe, { size: 16 })
            }
          )
        ] }) })
      ]
    }
  );
};
export {
  $e as default
};
