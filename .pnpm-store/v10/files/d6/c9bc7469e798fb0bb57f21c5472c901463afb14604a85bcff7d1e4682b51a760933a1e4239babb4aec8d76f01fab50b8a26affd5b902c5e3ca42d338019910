import * as o from "react";
import { composeEventHandlers as O } from "./index97.js";
import { createContextScope as T } from "./index99.js";
import { useControllableState as S } from "./index109.js";
import { useLayoutEffect as D } from "./index161.js";
import { useComposedRefs as L } from "./index98.js";
import { Primitive as v } from "./index107.js";
import { Presence as M } from "./index106.js";
import { useId as k } from "./index103.js";
import { j as c } from "./index7.js";
var u = "Collapsible", [F, W] = T(u), [B, g] = F(u), j = o.forwardRef(
  (e, a) => {
    const {
      __scopeCollapsible: s,
      open: r,
      defaultOpen: t,
      disabled: l,
      onOpenChange: i,
      ...m
    } = e, [d, p] = S({
      prop: r,
      defaultProp: t ?? !1,
      onChange: i,
      caller: u
    });
    return /* @__PURE__ */ c.jsx(
      B,
      {
        scope: s,
        disabled: l,
        contentId: k(),
        open: d,
        onOpenToggle: o.useCallback(() => p((C) => !C), [p]),
        children: /* @__PURE__ */ c.jsx(
          v.div,
          {
            "data-state": x(d),
            "data-disabled": l ? "" : void 0,
            ...m,
            ref: a
          }
        )
      }
    );
  }
);
j.displayName = u;
var w = "CollapsibleTrigger", A = o.forwardRef(
  (e, a) => {
    const { __scopeCollapsible: s, ...r } = e, t = g(w, s);
    return /* @__PURE__ */ c.jsx(
      v.button,
      {
        type: "button",
        "aria-controls": t.contentId,
        "aria-expanded": t.open || !1,
        "data-state": x(t.open),
        "data-disabled": t.disabled ? "" : void 0,
        disabled: t.disabled,
        ...r,
        ref: a,
        onClick: O(e.onClick, t.onOpenToggle)
      }
    );
  }
);
A.displayName = w;
var R = "CollapsibleContent", I = o.forwardRef(
  (e, a) => {
    const { forceMount: s, ...r } = e, t = g(R, e.__scopeCollapsible);
    return /* @__PURE__ */ c.jsx(M, { present: s || t.open, children: ({ present: l }) => /* @__PURE__ */ c.jsx(G, { ...r, ref: a, present: l }) });
  }
);
I.displayName = R;
var G = o.forwardRef((e, a) => {
  const { __scopeCollapsible: s, present: r, children: t, ...l } = e, i = g(R, s), [m, d] = o.useState(r), p = o.useRef(null), C = L(a, p), h = o.useRef(0), y = h.current, N = o.useRef(0), P = N.current, b = i.open || m, E = o.useRef(b), f = o.useRef(void 0);
  return o.useEffect(() => {
    const n = requestAnimationFrame(() => E.current = !1);
    return () => cancelAnimationFrame(n);
  }, []), D(() => {
    const n = p.current;
    if (n) {
      f.current = f.current || {
        transitionDuration: n.style.transitionDuration,
        animationName: n.style.animationName
      }, n.style.transitionDuration = "0s", n.style.animationName = "none";
      const _ = n.getBoundingClientRect();
      h.current = _.height, N.current = _.width, E.current || (n.style.transitionDuration = f.current.transitionDuration, n.style.animationName = f.current.animationName), d(r);
    }
  }, [i.open, r]), /* @__PURE__ */ c.jsx(
    v.div,
    {
      "data-state": x(i.open),
      "data-disabled": i.disabled ? "" : void 0,
      id: i.contentId,
      hidden: !b,
      ...l,
      ref: C,
      style: {
        "--radix-collapsible-content-height": y ? `${y}px` : void 0,
        "--radix-collapsible-content-width": P ? `${P}px` : void 0,
        ...e.style
      },
      children: b && t
    }
  );
});
function x(e) {
  return e ? "open" : "closed";
}
var X = j, Y = A, Z = I;
export {
  j as Collapsible,
  I as CollapsibleContent,
  A as CollapsibleTrigger,
  Z as Content,
  X as Root,
  Y as Trigger,
  W as createCollapsibleScope
};
