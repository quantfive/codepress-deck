import { createStackParser as f, UNKNOWN_FUNCTION as o } from "./index131.js";
const x = 30, l = 50;
function r(t, e, n, s) {
  const a = {
    filename: t,
    function: e === "<anonymous>" ? o : e,
    in_app: !0
    // All browser frames are considered in_app
  };
  return n !== void 0 && (a.lineno = n), s !== void 0 && (a.colno = s), a;
}
const u = /^\s*at (\S+?)(?::(\d+))(?::(\d+))\s*$/i, m = /^\s*at (?:(.+?\)(?: \[.+\])?|.*?) ?\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\/)?.*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i, v = /\((\S*)(?::(\d+))(?::(\d+))\)/, E = (t) => {
  const e = u.exec(t);
  if (e) {
    const [, s, a, i] = e;
    return r(s, o, +a, +i);
  }
  const n = m.exec(t);
  if (n) {
    if (n[2] && n[2].indexOf("eval") === 0) {
      const c = v.exec(n[2]);
      c && (n[2] = c[1], n[3] = c[2], n[4] = c[3]);
    }
    const [a, i] = d(n[1] || o, n[2]);
    return r(i, a, n[3] ? +n[3] : void 0, n[4] ? +n[4] : void 0);
  }
}, S = [x, E], O = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:[-a-z]+)?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i, k = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i, R = (t) => {
  const e = O.exec(t);
  if (e) {
    if (e[3] && e[3].indexOf(" > eval") > -1) {
      const i = k.exec(e[3]);
      i && (e[1] = e[1] || "eval", e[3] = i[1], e[4] = i[2], e[5] = "");
    }
    let s = e[3], a = e[1] || o;
    return [a, s] = d(a, s), r(s, a, e[4] ? +e[4] : void 0, e[5] ? +e[5] : void 0);
  }
}, g = [l, R], P = [S, g], h = f(...P), d = (t, e) => {
  const n = t.indexOf("safari-extension") !== -1, s = t.indexOf("safari-web-extension") !== -1;
  return n || s ? [
    t.indexOf("@") !== -1 ? t.split("@")[0] : o,
    n ? `safari-extension:${e}` : `safari-web-extension:${e}`
  ] : [t, e];
};
export {
  S as chromeStackLineParser,
  P as defaultStackLineParsers,
  h as defaultStackParser,
  g as geckoStackLineParser
};
