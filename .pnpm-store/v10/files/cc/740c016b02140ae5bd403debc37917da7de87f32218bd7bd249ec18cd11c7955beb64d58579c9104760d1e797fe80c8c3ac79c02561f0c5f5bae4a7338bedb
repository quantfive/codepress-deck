import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useContext, useState, useEffect, } from "react";
import { detectRepositoryInfo, parseRepositoryName } from "../lib/utils.js";
import { apiFetch, GET_CONFIG, generateDirectApiUrl, } from "../fetch.js";
import logger from "../lib/logger.js";
const RepositoryContext = createContext(undefined);
const DEFAULT_COLORS = [
    "#2563eb", // blue
    "#ffffff", // white
    "#f1c2c7", // pink
    "#000000", // black
    "#d97706", // orange
];
export const RepositoryProvider = ({ children }) => {
    const [repository, setRepository] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);
    const fetchRepositoryData = async () => {
        const repoInfo = detectRepositoryInfo();
        if (!repoInfo?.repository) {
            logger.debug("No repository info detected");
            return;
        }
        const parsedRepo = parseRepositoryName(repoInfo.repository);
        if (!parsedRepo) {
            logger.error("Failed to parse repository name:", repoInfo.repository);
            return;
        }
        setIsLoading(true);
        setError(null);
        try {
            const config = await GET_CONFIG();
            // TODO: this doesn't exist on the backend - need to investigate
            const response = await apiFetch(generateDirectApiUrl(`github/by-name/${parsedRepo.owner}/${parsedRepo.repo}`), config);
            if (response.ok) {
                const repoData = await response.json();
                setRepository(repoData);
                logger.debug("Repository data fetched:", repoData);
            }
            else {
                const errorText = await response.text();
                setError(`Failed to fetch repository: ${errorText}`);
                logger.error("Failed to fetch repository:", response.status, errorText);
            }
        }
        catch (err) {
            const errorMsg = err instanceof Error ? err.message : "Unknown error";
            setError(errorMsg);
            logger.error("Error fetching repository data:", err);
        }
        finally {
            setIsLoading(false);
        }
    };
    useEffect(() => {
        fetchRepositoryData();
    }, []);
    const colors = repository?.colors && repository.colors.length > 0
        ? repository.colors
        : DEFAULT_COLORS;
    const value = {
        repository,
        colors,
        isLoading,
        error,
        refetch: fetchRepositoryData,
    };
    return (_jsx(RepositoryContext.Provider, { value: value, children: children }));
};
export const useRepository = () => {
    const context = useContext(RepositoryContext);
    if (context === undefined) {
        throw new Error("useRepository must be used within a RepositoryProvider");
    }
    return context;
};
