import { j as e } from "./index7.js";
import { useDeployment as U } from "./index8.js";
import { useVisualEditor as M } from "./index6.js";
import { stripBranchPrefix as h, sanitizeBranchName as O } from "./index60.js";
import { logger as C } from "./index12.js";
import { cn as T } from "./index29.js";
import W from "./index40.js";
import { Popover as q, PopoverTrigger as A, PopoverContent as F } from "./index61.js";
import { useState as p, useCallback as I } from "react";
import { toast as N } from "./index23.js";
import { Button as t } from "./index54.js";
import L from "./index62.js";
import V from "./index63.js";
const oe = ({
  onSave: x,
  onCancel: k,
  unsavedChanges: s,
  isSaving: n
}) => {
  const {
    branchName: i,
    setBranchName: f,
    setShowDeploymentPopover: g,
    // Branch save history
    addSavedBranch: u,
    shouldShowSaveDialog: v
  } = U(), { undo: S, canUndo: D, redo: B, canRedo: P } = M(), [m, o] = p(!1), [E, b] = p(!1), [l, w] = p(
    void 0
  ), z = () => {
    b(!0);
  }, y = I(
    async (r) => {
      const d = r || i;
      if (v(h(d)) && !m)
        return o(!0), !1;
      try {
        const a = O(d);
        a !== d && (N.warning("We tweaked your save name", {
          id: "nameTweak",
          description: "Invalid characters were removed."
        }), C.log("Your save name has been sanitized")), f(a);
        const j = await x(a, l);
        if (j) {
          u(h(a)), w(void 0);
          const R = await getPreviewLink({
            branchName: a
          });
          o(!1), g({
            ...R,
            branch_name: a
          });
        }
        return j;
      } catch (a) {
        N.error("Save failed", {
          id: "saveFailed",
          description: a instanceof Error ? a.message : typeof a == "string" ? a : "Unknown Error",
          action: {
            label: "Retry",
            onClick: () => y(r)
          }
        }), W.captureException(a), C.error("Save failed:", a);
      }
      return !1;
    },
    [
      i,
      m,
      o,
      g,
      u,
      f,
      x,
      v,
      l
    ]
  ), c = s > 0;
  return /* @__PURE__ */ e.jsxs("div", { className: "fixed bottom-4 left-1/2 -translate-x-1/2 rounded-md shadow-xl border border-gray-200 bg-white/95 backdrop-blur w-fit z-[9999] flex items-center gap-4 min-w-0", children: [
    /* @__PURE__ */ e.jsx(
      "div",
      {
        className: T(
          "border-r-1 border-gray-300 p-3 flex-shrink-0",
          c ? "border-r-0" : ""
        ),
        children: /* @__PURE__ */ e.jsx(L, {})
      }
    ),
    c && /* @__PURE__ */ e.jsxs("span", { className: "bg-gray-200 text-gray-800 rounded-full px-3 py-1 text-sm font-medium whitespace-nowrap flex-shrink-0", children: [
      s,
      " unsaved change",
      s > 1 ? "s" : ""
    ] }),
    c && /* @__PURE__ */ e.jsxs("div", { className: "flex items-center gap-4 p-3 flex-shrink-0", children: [
      /* @__PURE__ */ e.jsx(
        t,
        {
          onClick: S,
          disabled: !D,
          variant: "ghost",
          className: "text-sm",
          children: "Undo"
        }
      ),
      /* @__PURE__ */ e.jsx(
        t,
        {
          onClick: k,
          disabled: n,
          variant: "ghost",
          className: "text-sm",
          children: "Discard"
        }
      ),
      /* @__PURE__ */ e.jsx(
        t,
        {
          onClick: B,
          disabled: !P,
          variant: "ghost",
          className: "text-sm",
          children: "Redo"
        }
      ),
      /* @__PURE__ */ e.jsxs(q, { open: E, onOpenChange: b, children: [
        /* @__PURE__ */ e.jsx(A, { asChild: !0, children: /* @__PURE__ */ e.jsx(
          t,
          {
            onClick: z,
            disabled: n,
            variant: "outline",
            className: "text-sm",
            children: "Comment"
          }
        ) }),
        /* @__PURE__ */ e.jsxs(
          F,
          {
            className: "z-[10050] w-[480px] p-4 shadow-xl border border-gray-200 bg-white rounded-xl",
            side: "top",
            sideOffset: 24,
            align: "center",
            children: [
              /* @__PURE__ */ e.jsx("h4", { className: "text-base font-semibold mb-1", children: "Add you Comment" }),
              /* @__PURE__ */ e.jsx("p", { className: "text-sm text-gray-600 mb-4", children: "When you save, CodePress will add this comments to the github pull request (so any developer can read them)." }),
              /* @__PURE__ */ e.jsx(
                "textarea",
                {
                  id: "comment",
                  name: "commitMessage",
                  onChange: (r) => w(
                    r.target.value ? r.target.value : void 0
                  ),
                  value: l,
                  className: "w-full border focus:ring-gray-900"
                }
              )
            ]
          }
        )
      ] }),
      /* @__PURE__ */ e.jsx(
        V,
        {
          open: m,
          onOpenChange: o,
          branchName: h(i),
          onSave: y,
          isSaving: n
        }
      )
    ] })
  ] });
};
export {
  oe as default
};
