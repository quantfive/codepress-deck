import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { ExternalLink, X } from "lucide-react";
import * as PopoverPrimitive from "@radix-ui/react-popover";
import { Popover, PopoverContent, } from "@/components/ui/popover";
import { deployStatusString, deployColor, checkIsDeploying } from "@/lib/deployment";
import { useDeployment } from "@/context/DeploymentContext";
import { checkIsStaticDeployUrl } from "@/lib/deployment";
import { detectRepositoryInfo } from "@/lib/utils";
import Sentry from "@/sentry";
import logger from "@/lib/logger";
export function DeploymentPopover({ isEditing, }) {
    const { showDeploymentPopover, setShowDeploymentPopover, deploymentPopover, branchName, viewingStaleVersion, } = useDeployment();
    if (!deploymentPopover) {
        if (showDeploymentPopover) {
            Sentry.captureMessage("Deployment popover with no deployment in context");
            logger.error("Deployment popover with no deployment in context");
        }
        return;
    }
    const repoInfo = detectRepositoryInfo();
    let isStaticDeployUrl = false;
    try {
        isStaticDeployUrl = checkIsStaticDeployUrl(new URL(deploymentPopover.preview_url), repoInfo?.repository, repoInfo?.branch);
    }
    catch (e) {
    }
    const isDeploying = checkIsDeploying(deploymentPopover.state);
    const lastSavedText = deploymentPopover.commit_date
        ? new Intl.DateTimeFormat(undefined, { dateStyle: "medium", timeStyle: "short" }).format(new Date(deploymentPopover.commit_date))
        : "â€”";
    const handleOpenChange = (open) => {
        setShowDeploymentPopover(open ? {} : null);
    };
    return (_jsxs(Popover, { open: showDeploymentPopover && isEditing, onOpenChange: handleOpenChange, children: [_jsx(PopoverPrimitive.Anchor, { className: "fixed bottom-4 right-4 w-12 h-12", style: { pointerEvents: "none" } }), _jsx(PopoverContent, { side: "top", align: "end", className: "w-[480px] p-4", onInteractOutside: (e) => e.preventDefault(), onPointerDownOutside: (e) => e.preventDefault(), onFocusOutside: (e) => e.preventDefault(), children: _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex justify-between", children: [_jsxs("div", { className: "text-base font-semibold", children: [deployStatusString(deploymentPopover.state), " ", deploymentPopover.branch_name || branchName] }), _jsx("button", { className: "p-0 m-0 bg-transparent border-none outline-none hover:bg-transparent focus:outline-none", onClick: () => setShowDeploymentPopover(null), children: _jsx(X, { className: "w-4 h-4" }) })] }), isDeploying && (_jsx("p", { className: "text-sm text-gray-600", children: "CodePress is generating a shareable link with your updates \u2014 it might take 3\u20135 minutes." })), viewingStaleVersion && !isDeploying && (_jsxs("p", { className: "text-sm text-gray-600", children: ["You seem to be on a stale version. ", isStaticDeployUrl ? (_jsx(_Fragment, { children: "Please refresh the page to see the most recent deployed changes." })) : (_jsx(_Fragment, { children: "Please follow click the preview url to see the most recent deployed changes." }))] })), _jsxs("div", { className: "flex items-center justify-between rounded-md bg-gray-50 border px-3 py-2", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx("span", { className: `inline-block h-2 w-2 rounded-full ${deployColor(deploymentPopover.state)} ${isDeploying ? 'animate-pulse scale-110 transition-transform' : ''}` }), _jsx("span", { className: "text-sm font-medium", children: deploymentPopover.branch_name || branchName })] }), _jsx("div", { className: "flex items-center gap-2", children: !!deploymentPopover.preview_url && (_jsxs("a", { href: deploymentPopover.preview_url, target: "_blank", rel: "noreferrer", className: "flex text-xs underline gap-2", title: "Open preview", children: [deploymentPopover.preview_url, _jsx(ExternalLink, { className: "w-4 h-4 text-gray-500" })] })) })] }), _jsxs("div", { className: "text-xs text-gray-500", children: ["Last saved ", lastSavedText] })] }) })] }));
}
