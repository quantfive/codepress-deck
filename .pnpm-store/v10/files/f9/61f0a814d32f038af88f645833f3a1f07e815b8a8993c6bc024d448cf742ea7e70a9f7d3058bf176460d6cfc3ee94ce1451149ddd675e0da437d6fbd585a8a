import { DEBUG_BUILD as h } from "./index208.js";
import { consoleSandbox as I, debug as a } from "./index151.js";
const g = /^o(\d+)\./, $ = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;
function m(t) {
  return t === "http" || t === "https";
}
function b(t, r = !1) {
  const { host: n, path: o, pass: i, port: c, projectId: e, protocol: l, publicKey: p } = t;
  return `${l}://${p}${r && i ? `:${i}` : ""}@${n}${c ? `:${c}` : ""}/${o && `${o}/`}${e}`;
}
function D(t) {
  const r = $.exec(t);
  if (!r) {
    I(() => {
      console.error(`Invalid Sentry Dsn: ${t}`);
    });
    return;
  }
  const [n, o, i = "", c = "", e = "", l = ""] = r.slice(1);
  let p = "", s = l;
  const u = s.split("/");
  if (u.length > 1 && (p = u.slice(0, -1).join("/"), s = u.pop()), s) {
    const d = s.match(/^\d+/);
    d && (s = d[0]);
  }
  return f({ host: c, pass: i, path: p, projectId: s, port: e, protocol: n, publicKey: o });
}
function f(t) {
  return {
    protocol: t.protocol,
    publicKey: t.publicKey || "",
    pass: t.pass || "",
    host: t.host,
    port: t.port || "",
    path: t.path || "",
    projectId: t.projectId
  };
}
function y(t) {
  if (!h)
    return !0;
  const { port: r, projectId: n, protocol: o } = t;
  return ["protocol", "publicKey", "host", "projectId"].find((e) => t[e] ? !1 : (a.error(`Invalid Sentry Dsn: ${e} missing`), !0)) ? !1 : n.match(/^\d+$/) ? m(o) ? r && isNaN(parseInt(r, 10)) ? (a.error(`Invalid Sentry Dsn: Invalid port ${r}`), !1) : !0 : (a.error(`Invalid Sentry Dsn: Invalid protocol ${o}`), !1) : (a.error(`Invalid Sentry Dsn: Invalid projectId ${n}`), !1);
}
function S(t) {
  return t.match(g)?.[1];
}
function C(t) {
  const r = t.getOptions(), { host: n } = t.getDsn() || {};
  let o;
  return r.orgId ? o = String(r.orgId) : n && (o = S(n)), o;
}
function x(t) {
  const r = typeof t == "string" ? D(t) : f(t);
  if (!(!r || !y(r)))
    return r;
}
export {
  D as dsnFromString,
  b as dsnToString,
  C as extractOrgIdFromClient,
  S as extractOrgIdFromDsnHost,
  x as makeDsn
};
