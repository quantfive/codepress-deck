import { uuid4 as a } from "./index121.js";
import { timestampInSeconds as e } from "./index207.js";
function p(r) {
  const i = e(), d = {
    sid: a(),
    init: !0,
    timestamp: i,
    started: i,
    duration: 0,
    status: "ok",
    errors: 0,
    ignoreDuration: !1,
    toJSON: () => m(d)
  };
  return r && u(d, r), d;
}
function u(r, i = {}) {
  if (i.user && (!r.ipAddress && i.user.ip_address && (r.ipAddress = i.user.ip_address), !r.did && !i.did && (r.did = i.user.id || i.user.email || i.user.username)), r.timestamp = i.timestamp || e(), i.abnormal_mechanism && (r.abnormal_mechanism = i.abnormal_mechanism), i.ignoreDuration && (r.ignoreDuration = i.ignoreDuration), i.sid && (r.sid = i.sid.length === 32 ? i.sid : a()), i.init !== void 0 && (r.init = i.init), !r.did && i.did && (r.did = `${i.did}`), typeof i.started == "number" && (r.started = i.started), r.ignoreDuration)
    r.duration = void 0;
  else if (typeof i.duration == "number")
    r.duration = i.duration;
  else {
    const d = r.timestamp - r.started;
    r.duration = d >= 0 ? d : 0;
  }
  i.release && (r.release = i.release), i.environment && (r.environment = i.environment), !r.ipAddress && i.ipAddress && (r.ipAddress = i.ipAddress), !r.userAgent && i.userAgent && (r.userAgent = i.userAgent), typeof i.errors == "number" && (r.errors = i.errors), i.status && (r.status = i.status);
}
function n(r, i) {
  let d = {};
  r.status === "ok" && (d = { status: "exited" }), u(r, d);
}
function m(r) {
  return {
    sid: `${r.sid}`,
    init: r.init,
    // Make sure that sec is converted to ms for date constructor
    started: new Date(r.started * 1e3).toISOString(),
    timestamp: new Date(r.timestamp * 1e3).toISOString(),
    status: r.status,
    errors: r.errors,
    did: typeof r.did == "number" || typeof r.did == "string" ? `${r.did}` : void 0,
    duration: r.duration,
    abnormal_mechanism: r.abnormal_mechanism,
    attrs: {
      release: r.release,
      environment: r.environment,
      ip_address: r.ipAddress,
      user_agent: r.userAgent
    }
  };
}
export {
  n as closeSession,
  p as makeSession,
  u as updateSession
};
