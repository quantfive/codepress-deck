import { DEBUG_BUILD as c } from "./index208.js";
import { defineIntegration as p } from "./index144.js";
import { debug as m } from "./index151.js";
import { getFramesFromEvent as o } from "./index131.js";
const g = "Dedupe", d = () => {
  let n;
  return {
    name: g,
    processEvent(t) {
      if (t.type)
        return t;
      try {
        if (_(t, n))
          return c && m.warn("Event dropped due to being a duplicate of previously captured event."), null;
      } catch {
      }
      return n = t;
    }
  };
}, D = p(d);
function _(n, t) {
  return t ? !!(F(n, t) || h(n, t)) : !1;
}
function F(n, t) {
  const r = n.message, e = t.message;
  return !(!r && !e || r && !e || !r && e || r !== e || !l(n, t) || !s(n, t));
}
function h(n, t) {
  const r = a(t), e = a(n);
  return !(!r || !e || r.type !== e.type || r.value !== e.value || !l(n, t) || !s(n, t));
}
function s(n, t) {
  let r = o(n), e = o(t);
  if (!r && !e)
    return !0;
  if (r && !e || !r && e || (r = r, e = e, e.length !== r.length))
    return !1;
  for (let i = 0; i < e.length; i++) {
    const f = e[i], u = r[i];
    if (f.filename !== u.filename || f.lineno !== u.lineno || f.colno !== u.colno || f.function !== u.function)
      return !1;
  }
  return !0;
}
function l(n, t) {
  let r = n.fingerprint, e = t.fingerprint;
  if (!r && !e)
    return !0;
  if (r && !e || !r && e)
    return !1;
  r = r, e = e;
  try {
    return r.join("") === e.join("");
  } catch {
    return !1;
  }
}
function a(n) {
  return n.exception?.values?.[0];
}
export {
  _ as _shouldDropEvent,
  D as dedupeIntegration
};
