import { checkGithubMode as w, API_BASE_URL as p, BASE_LOCAL_CODEPRESS_DEPRECATED as E } from "./index26.js";
import b from "./index40.js";
import { POST_CONFIG as h, apiFetch as g } from "./index38.js";
import { logger as l } from "./index12.js";
import { detectRepositoryInfo as m } from "./index29.js";
const $ = (t, e = !1) => {
  t.textContent;
  const a = t.innerHTML, r = t.tagName.toLowerCase(), o = {};
  for (let i = 0; i < t.attributes.length; i++) {
    const s = t.attributes[i], c = s.name.toLowerCase();
    let f = s.value;
    c.startsWith("data-cpt-") || c === "contenteditable" || c.includes("data-codepress") || c.includes("codepress-data") || c === "codepress-data-fp" && !e || c === "style" && (f = f.split(";").map((d) => d.trim()).filter((d) => d !== "").filter((d) => !/^cursor\s*:\s*text/i.test(d)).join("; "), !f) || (o[c] = f);
  }
  const n = document.createElement("div"), u = document.createElement(r);
  if (Object.entries(o).forEach(([i, s]) => {
    u.setAttribute(i, s);
  }), r === "img") {
    const i = t.getAttribute("src");
    i && u.setAttribute("src", i);
    const s = t.getAttribute("alt");
    s && u.setAttribute("alt", s);
  } else
    u.innerHTML = a;
  return n.appendChild(u), n.innerHTML;
}, k = async (t) => {
  try {
    const e = m(), a = await h({
      data: {
        repo_name: e?.repository,
        branch_name: t?.branchName
      },
      includeAuth: !0
    }), r = w(), o = r ? `${p}/code-sync/preview` : `${p}/code-sync/preview`;
    l.log(
      `[getPreviewLink] GitHub mode: ${r}, using URL: ${o}`
    );
    const n = await g(o, a);
    if (!n.ok) throw new Error("Failed to fetch preview data");
    return await n.json();
  } catch (e) {
    return l.error("Error getting preview:", e), b.captureException(e), {};
  }
}, M = async () => {
  const t = m(), e = `${p}/code-sync/branches`, a = await h({
    data: {
      repo_name: t?.repository
    },
    includeAuth: !0
  }), r = await g(e, a);
  if (!r.ok) throw new Error("Failed to fetch preview data");
  return await r.json();
}, H = async (t) => {
  const e = m(), a = `${p}/code-sync/delete`, r = await h({
    data: {
      repo_name: e?.repository,
      branch_name: t.branchName
    },
    includeAuth: !0
  }), o = await g(a, r);
  if (!o.ok) throw new Error("Failed to fetch preview data");
  return await o.json();
}, I = async (t) => {
  try {
    const e = new CustomEvent("elementChanged", {
      detail: t,
      bubbles: !0,
      composed: !0
    });
    document.dispatchEvent(e);
    const a = await h({
      data: t,
      includeAuth: !0
    }), r = w(), o = r ? `${p}/code-sync/update-file` : `${E}/visual-editor-api`;
    l.debug(
      `[saveVisualEditorChanges] GitHub mode: ${r}, using URL: ${o}`
    );
    const n = await g(o, a);
    return n?.ok || l.error("Error saving changes:", n), !!n?.ok;
  } catch (e) {
    return l.error("Error saving changes:", e), b.captureException(e), !1;
  }
};
export {
  H as deleteGithubBranch,
  M as getBranches,
  $ as getCleanElementHTML,
  k as getPreviewLink,
  I as saveVisualEditorChanges
};
