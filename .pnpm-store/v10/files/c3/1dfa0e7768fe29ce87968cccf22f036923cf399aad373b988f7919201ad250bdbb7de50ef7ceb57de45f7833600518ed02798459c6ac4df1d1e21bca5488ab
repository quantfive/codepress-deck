import { __module as p } from "./index78.js";
var N = p.exports, m;
function O() {
  return m ? p.exports : (m = 1, function(L) {
    (function(g, i) {
      L.exports ? L.exports = i() : g.log = i();
    })(N, function() {
      var g = function() {
      }, i = "undefined", C = typeof window !== i && typeof window.navigator !== i && /Trident\/|MSIE /.test(window.navigator.userAgent), y = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
      ], u = {}, l = null;
      function h(o, t) {
        var e = o[t];
        if (typeof e.bind == "function")
          return e.bind(o);
        try {
          return Function.prototype.bind.call(e, o);
        } catch {
          return function() {
            return Function.prototype.apply.apply(e, [o, arguments]);
          };
        }
      }
      function R() {
        console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();
      }
      function x(o) {
        return o === "debug" && (o = "log"), typeof console === i ? !1 : o === "trace" && C ? R : console[o] !== void 0 ? h(console, o) : console.log !== void 0 ? h(console, "log") : g;
      }
      function a() {
        for (var o = this.getLevel(), t = 0; t < y.length; t++) {
          var e = y[t];
          this[e] = t < o ? g : this.methodFactory(e, o, this.name);
        }
        if (this.log = this.debug, typeof console === i && o < this.levels.SILENT)
          return "No console available for logging";
      }
      function F(o) {
        return function() {
          typeof console !== i && (a.call(this), this[o].apply(this, arguments));
        };
      }
      function A(o, t, e) {
        return x(o) || F.apply(this, arguments);
      }
      function b(o, t) {
        var e = this, v, w, f, s = "loglevel";
        typeof o == "string" ? s += ":" + o : typeof o == "symbol" && (s = void 0);
        function U(n) {
          var r = (y[n] || "silent").toUpperCase();
          if (!(typeof window === i || !s)) {
            try {
              window.localStorage[s] = r;
              return;
            } catch {
            }
            try {
              window.document.cookie = encodeURIComponent(s) + "=" + r + ";";
            } catch {
            }
          }
        }
        function E() {
          var n;
          if (!(typeof window === i || !s)) {
            try {
              n = window.localStorage[s];
            } catch {
            }
            if (typeof n === i)
              try {
                var r = window.document.cookie, d = encodeURIComponent(s), T = r.indexOf(d + "=");
                T !== -1 && (n = /^([^;]+)/.exec(
                  r.slice(T + d.length + 1)
                )[1]);
              } catch {
              }
            return e.levels[n] === void 0 && (n = void 0), n;
          }
        }
        function _() {
          if (!(typeof window === i || !s)) {
            try {
              window.localStorage.removeItem(s);
            } catch {
            }
            try {
              window.document.cookie = encodeURIComponent(s) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
            } catch {
            }
          }
        }
        function c(n) {
          var r = n;
          if (typeof r == "string" && e.levels[r.toUpperCase()] !== void 0 && (r = e.levels[r.toUpperCase()]), typeof r == "number" && r >= 0 && r <= e.levels.SILENT)
            return r;
          throw new TypeError("log.setLevel() called with invalid level: " + n);
        }
        e.name = o, e.levels = {
          TRACE: 0,
          DEBUG: 1,
          INFO: 2,
          WARN: 3,
          ERROR: 4,
          SILENT: 5
        }, e.methodFactory = t || A, e.getLevel = function() {
          return f ?? w ?? v;
        }, e.setLevel = function(n, r) {
          return f = c(n), r !== !1 && U(f), a.call(e);
        }, e.setDefaultLevel = function(n) {
          w = c(n), E() || e.setLevel(n, !1);
        }, e.resetLevel = function() {
          f = null, _(), a.call(e);
        }, e.enableAll = function(n) {
          e.setLevel(e.levels.TRACE, n);
        }, e.disableAll = function(n) {
          e.setLevel(e.levels.SILENT, n);
        }, e.rebuild = function() {
          if (l !== e && (v = c(l.getLevel())), a.call(e), l === e)
            for (var n in u)
              u[n].rebuild();
        }, v = c(
          l ? l.getLevel() : "WARN"
        );
        var I = E();
        I != null && (f = c(I)), a.call(e);
      }
      l = new b(), l.getLogger = function(t) {
        if (typeof t != "symbol" && typeof t != "string" || t === "")
          throw new TypeError("You must supply a name when creating a logger.");
        var e = u[t];
        return e || (e = u[t] = new b(
          t,
          l.methodFactory
        )), e;
      };
      var S = typeof window !== i ? window.log : void 0;
      return l.noConflict = function() {
        return typeof window !== i && window.log === l && (window.log = S), l;
      }, l.getLoggers = function() {
        return u;
      }, l.default = l, l;
    });
  }(p), p.exports);
}
export {
  O as __require
};
