import { SyncPromise as m, resolvedSyncPromise as a, rejectedSyncPromise as h } from "./index130.js";
const S = Symbol.for("SentryBufferFullError");
function R(t) {
  const n = [];
  function f() {
    return t === void 0 || n.length < t;
  }
  function o(r) {
    return n.splice(n.indexOf(r), 1)[0] || Promise.resolve(void 0);
  }
  function i(r) {
    if (!f())
      return h(S);
    const e = r();
    return n.indexOf(e) === -1 && n.push(e), e.then(() => o(e)).then(
      null,
      () => o(e).then(null, () => {
      })
    ), e;
  }
  function c(r) {
    return new m((e, d) => {
      let u = n.length;
      if (!u)
        return e(!0);
      const s = setTimeout(() => {
        r && r > 0 && e(!1);
      }, r);
      n.forEach((l) => {
        a(l).then(() => {
          --u || (clearTimeout(s), e(!0));
        }, d);
      });
    });
  }
  return {
    $: n,
    add: i,
    drain: c
  };
}
export {
  S as SENTRY_BUFFER_FULL_ERROR,
  R as makePromiseBuffer
};
