import { isVueViewModel as g, isSyntheticEvent as a } from "./index132.js";
import { convertToPlainObject as z } from "./index119.js";
import { getFunctionName as h } from "./index131.js";
function l(n, t = 100, r = 1 / 0) {
  try {
    return y("", n, t, r);
  } catch (i) {
    return { ERROR: `**non-serializable** (${i})` };
  }
}
function w(n, t = 3, r = 100 * 1024) {
  const i = l(n, t);
  return $(i) > r ? w(n, t - 1, r) : i;
}
function y(n, t, r = 1 / 0, i = 1 / 0, o = j()) {
  const [p, b] = o;
  if (t == null || // this matches null and undefined -> eqeq not eqeqeq
  ["boolean", "string"].includes(typeof t) || typeof t == "number" && Number.isFinite(t))
    return t;
  const f = O(n, t);
  if (!f.startsWith("[object "))
    return f;
  if (t.__sentry_skip_normalization__)
    return t;
  const c = typeof t.__sentry_override_normalization_depth__ == "number" ? t.__sentry_override_normalization_depth__ : r;
  if (c === 0)
    return f.replace("object ", "");
  if (p(t))
    return "[Circular ~]";
  const s = t;
  if (s && typeof s.toJSON == "function")
    try {
      const e = s.toJSON();
      return y("", e, c - 1, i, o);
    } catch {
    }
  const u = Array.isArray(t) ? [] : {};
  let d = 0;
  const m = z(t);
  for (const e in m) {
    if (!Object.prototype.hasOwnProperty.call(m, e))
      continue;
    if (d >= i) {
      u[e] = "[MaxProperties ~]";
      break;
    }
    const _ = m[e];
    u[e] = y(e, _, c - 1, i, o), d++;
  }
  return b(t), u;
}
function O(n, t) {
  try {
    if (n === "domain" && t && typeof t == "object" && t._events)
      return "[Domain]";
    if (n === "domainEmitter")
      return "[DomainEmitter]";
    if (typeof global < "u" && t === global)
      return "[Global]";
    if (typeof window < "u" && t === window)
      return "[Window]";
    if (typeof document < "u" && t === document)
      return "[Document]";
    if (g(t))
      return "[VueViewModel]";
    if (a(t))
      return "[SyntheticEvent]";
    if (typeof t == "number" && !Number.isFinite(t))
      return `[${t}]`;
    if (typeof t == "function")
      return `[Function: ${h(t)}]`;
    if (typeof t == "symbol")
      return `[${String(t)}]`;
    if (typeof t == "bigint")
      return `[BigInt: ${String(t)}]`;
    const r = S(t);
    return /^HTML(\w*)Element$/.test(r) ? `[HTMLElement: ${r}]` : `[object ${r}]`;
  } catch (r) {
    return `**non-serializable** (${r})`;
  }
}
function S(n) {
  const t = Object.getPrototypeOf(n);
  return t?.constructor ? t.constructor.name : "null prototype";
}
function N(n) {
  return ~-encodeURI(n).split(/%..|./).length;
}
function $(n) {
  return N(JSON.stringify(n));
}
function j() {
  const n = /* @__PURE__ */ new WeakSet();
  function t(i) {
    return n.has(i) ? !0 : (n.add(i), !1);
  }
  function r(i) {
    n.delete(i);
  }
  return [t, r];
}
export {
  l as normalize,
  w as normalizeToSize
};
