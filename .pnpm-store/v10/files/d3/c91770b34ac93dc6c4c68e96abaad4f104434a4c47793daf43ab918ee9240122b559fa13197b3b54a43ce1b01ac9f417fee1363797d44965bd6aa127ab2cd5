import p from "react";
import { createContextScope as y } from "./index99.js";
import { Primitive as G } from "./index107.js";
import { createRovingFocusGroupScope as T, Item as S, Root as V } from "./index236.js";
import { Toggle as M } from "./index237.js";
import { useControllableState as P } from "./index109.js";
import { useDirection as A } from "./index233.js";
import { j as s } from "./index7.js";
var c = "ToggleGroup", [_] = y(c, [
  T
]), C = T(), f = p.forwardRef((e, r) => {
  const { type: a, ...t } = e;
  if (a === "single") {
    const l = t;
    return /* @__PURE__ */ s.jsx(E, { ...l, ref: r });
  }
  if (a === "multiple") {
    const l = t;
    return /* @__PURE__ */ s.jsx(F, { ...l, ref: r });
  }
  throw new Error(`Missing prop \`type\` expected on \`${c}\``);
});
f.displayName = c;
var [I, h] = _(c), E = p.forwardRef((e, r) => {
  const {
    value: a,
    defaultValue: t,
    onValueChange: l = () => {
    },
    ...u
  } = e, [n, o] = P({
    prop: a,
    defaultProp: t ?? "",
    onChange: l,
    caller: c
  });
  return /* @__PURE__ */ s.jsx(
    I,
    {
      scope: e.__scopeToggleGroup,
      type: "single",
      value: p.useMemo(() => n ? [n] : [], [n]),
      onItemActivate: o,
      onItemDeactivate: p.useCallback(() => o(""), [o]),
      children: /* @__PURE__ */ s.jsx(j, { ...u, ref: r })
    }
  );
}), F = p.forwardRef((e, r) => {
  const {
    value: a,
    defaultValue: t,
    onValueChange: l = () => {
    },
    ...u
  } = e, [n, o] = P({
    prop: a,
    defaultProp: t ?? [],
    onChange: l,
    caller: c
  }), i = p.useCallback(
    (g) => o((v = []) => [...v, g]),
    [o]
  ), d = p.useCallback(
    (g) => o((v = []) => v.filter((b) => b !== g)),
    [o]
  );
  return /* @__PURE__ */ s.jsx(
    I,
    {
      scope: e.__scopeToggleGroup,
      type: "multiple",
      value: n,
      onItemActivate: i,
      onItemDeactivate: d,
      children: /* @__PURE__ */ s.jsx(j, { ...u, ref: r })
    }
  );
});
f.displayName = c;
var [w, D] = _(c), j = p.forwardRef(
  (e, r) => {
    const {
      __scopeToggleGroup: a,
      disabled: t = !1,
      rovingFocus: l = !0,
      orientation: u,
      dir: n,
      loop: o = !0,
      ...i
    } = e, d = C(a), g = A(n), v = { role: "group", dir: g, ...i };
    return /* @__PURE__ */ s.jsx(w, { scope: a, rovingFocus: l, disabled: t, children: l ? /* @__PURE__ */ s.jsx(
      V,
      {
        asChild: !0,
        ...d,
        orientation: u,
        dir: g,
        loop: o,
        children: /* @__PURE__ */ s.jsx(G.div, { ...v, ref: r })
      }
    ) : /* @__PURE__ */ s.jsx(G.div, { ...v, ref: r }) });
  }
), m = "ToggleGroupItem", R = p.forwardRef(
  (e, r) => {
    const a = h(m, e.__scopeToggleGroup), t = D(m, e.__scopeToggleGroup), l = C(e.__scopeToggleGroup), u = a.value.includes(e.value), n = t.disabled || e.disabled, o = { ...e, pressed: u, disabled: n }, i = p.useRef(null);
    return t.rovingFocus ? /* @__PURE__ */ s.jsx(
      S,
      {
        asChild: !0,
        ...l,
        focusable: !n,
        active: u,
        ref: i,
        children: /* @__PURE__ */ s.jsx(x, { ...o, ref: r })
      }
    ) : /* @__PURE__ */ s.jsx(x, { ...o, ref: r });
  }
);
R.displayName = m;
var x = p.forwardRef(
  (e, r) => {
    const { __scopeToggleGroup: a, value: t, ...l } = e, u = h(m, a), n = { role: "radio", "aria-checked": e.pressed, "aria-pressed": void 0 }, o = u.type === "single" ? n : void 0;
    return /* @__PURE__ */ s.jsx(
      M,
      {
        ...o,
        ...l,
        ref: r,
        onPressedChange: (i) => {
          i ? u.onItemActivate(t) : u.onItemDeactivate(t);
        }
      }
    );
  }
), z = f, H = R;
export {
  H as Item,
  z as Root,
  f as ToggleGroup,
  R as ToggleGroupItem
};
