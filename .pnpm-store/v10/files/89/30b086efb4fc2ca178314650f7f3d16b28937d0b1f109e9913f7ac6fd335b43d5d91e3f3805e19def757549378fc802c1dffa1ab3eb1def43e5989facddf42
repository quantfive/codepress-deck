import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { Input } from "./input.js";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./select.js";
const CSS_UNITS = [
    "px", "rem", "em", "%", "vh", "vw", "vmin", "vmax",
    "ex", "ch", "fr", "auto", "inherit", "initial", "unset"
];
// Helper function to extract numeric value and unit from a CSS value
const parseValueAndUnit = (value) => {
    if (!value || value.trim() === "") {
        return { numeric: "", unit: "px" };
    }
    const trimmed = value.trim();
    // Handle keywords like "auto", "inherit", etc.
    if (CSS_UNITS.includes(trimmed) && !trimmed.match(/^\d/)) {
        return { numeric: "", unit: trimmed };
    }
    // Match numeric value with optional unit
    const match = trimmed.match(/^(-?\d*\.?\d*)(.*)$/);
    if (match) {
        const numeric = match[1] || "";
        const unit = match[2] || "px";
        return { numeric, unit: CSS_UNITS.includes(unit) ? unit : "px" };
    }
    return { numeric: trimmed, unit: "px" };
};
const InputWithUnitSelect = ({ id, className, value, placeholder, onChange, onCommit, container, startEnhancer, }) => {
    const [numericValue, setNumericValue] = useState("");
    const [selectedUnit, setSelectedUnit] = useState("px");
    // Parse the incoming value to separate numeric and unit parts
    useEffect(() => {
        const { numeric, unit } = parseValueAndUnit(value);
        setNumericValue(numeric);
        setSelectedUnit(unit);
    }, [value]);
    const handleNumericChange = (e) => {
        const newNumeric = e.target.value;
        setNumericValue(newNumeric);
        // Create the full value with unit
        const fullValue = newNumeric === "" ? "" : `${newNumeric}${selectedUnit}`;
        // Create a synthetic event with the full value
        const syntheticEvent = {
            ...e,
            target: { ...e.target, value: fullValue }
        };
        onChange(syntheticEvent);
    };
    const handleUnitChange = (newUnit) => {
        setSelectedUnit(newUnit);
        // Handle special cases where unit is the whole value (like "auto")
        const isKeywordValue = !!newUnit.match(/^(auto|inherit|initial|unset)$/);
        const fullValue = isKeywordValue
            ? newUnit
            : numericValue === "" ? "" : `${numericValue}${newUnit}`;
        // Create a synthetic event
        const syntheticEvent = {
            target: { value: fullValue },
            currentTarget: { value: fullValue }
        };
        onChange(syntheticEvent);
    };
    const handleCommit = (val) => {
        if (onCommit) {
            onCommit(val);
        }
    };
    // For keyword units, disable the numeric input
    const isKeywordUnit = !!selectedUnit.match(/^(auto|inherit|initial|unset)$/);
    return (_jsx("div", { className: "flex items-center gap-1", children: _jsx(Input, { id: id, className: className, value: isKeywordUnit ? "" : numericValue, placeholder: isKeywordUnit ? selectedUnit : placeholder, onChange: handleNumericChange, onCommit: handleCommit, disabled: isKeywordUnit, startEnhancer: startEnhancer, endEnhancer: _jsxs(Select, { value: selectedUnit, onValueChange: handleUnitChange, children: [_jsx(SelectTrigger, { size: "sm", className: "w-16 h-6 px-1 text-xs border-none bg-transparent hover:bg-slate-100", children: _jsx(SelectValue, {}) }), _jsx(SelectContent, { container: container, children: CSS_UNITS.map((unit) => (_jsx(SelectItem, { value: unit, className: "text-xs", children: unit }, unit))) })] }) }) }));
};
export { InputWithUnitSelect };
