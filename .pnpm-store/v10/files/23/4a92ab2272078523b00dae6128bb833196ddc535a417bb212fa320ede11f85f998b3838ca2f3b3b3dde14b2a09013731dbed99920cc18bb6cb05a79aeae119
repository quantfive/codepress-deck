import { getDynamicSamplingContextFromSpan as y } from "./index190.js";
import { merge as x } from "./index209.js";
import { spanToTraceContext as d, getRootSpan as h, spanToJSON as k } from "./index196.js";
function N(t, r) {
  const { fingerprint: n, span: s, breadcrumbs: i, sdkProcessingMetadata: o } = r;
  P(t, r), s && T(t, s), C(t, n), S(t, i), M(t, o);
}
function j(t, r) {
  const {
    extra: n,
    tags: s,
    user: i,
    contexts: o,
    level: e,
    sdkProcessingMetadata: a,
    breadcrumbs: p,
    fingerprint: g,
    eventProcessors: f,
    attachments: m,
    propagationContext: b,
    transactionName: l,
    span: u
  } = r;
  c(t, "extra", n), c(t, "tags", s), c(t, "user", i), c(t, "contexts", o), t.sdkProcessingMetadata = x(t.sdkProcessingMetadata, a, 2), e && (t.level = e), l && (t.transactionName = l), u && (t.span = u), p.length && (t.breadcrumbs = [...t.breadcrumbs, ...p]), g.length && (t.fingerprint = [...t.fingerprint, ...g]), f.length && (t.eventProcessors = [...t.eventProcessors, ...f]), m.length && (t.attachments = [...t.attachments, ...m]), t.propagationContext = { ...t.propagationContext, ...b };
}
function c(t, r, n) {
  t[r] = x(t[r], n, 1);
}
function P(t, r) {
  const { extra: n, tags: s, user: i, contexts: o, level: e, transactionName: a } = r;
  Object.keys(n).length && (t.extra = { ...n, ...t.extra }), Object.keys(s).length && (t.tags = { ...s, ...t.tags }), Object.keys(i).length && (t.user = { ...i, ...t.user }), Object.keys(o).length && (t.contexts = { ...o, ...t.contexts }), e && (t.level = e), a && t.type !== "transaction" && (t.transaction = a);
}
function S(t, r) {
  const n = [...t.breadcrumbs || [], ...r];
  t.breadcrumbs = n.length ? n : void 0;
}
function M(t, r) {
  t.sdkProcessingMetadata = {
    ...t.sdkProcessingMetadata,
    ...r
  };
}
function T(t, r) {
  t.contexts = {
    trace: d(r),
    ...t.contexts
  }, t.sdkProcessingMetadata = {
    dynamicSamplingContext: y(r),
    ...t.sdkProcessingMetadata
  };
  const n = h(r), s = k(n).description;
  s && !t.transaction && t.type === "transaction" && (t.transaction = s);
}
function C(t, r) {
  t.fingerprint = t.fingerprint ? Array.isArray(t.fingerprint) ? t.fingerprint : [t.fingerprint] : [], r && (t.fingerprint = t.fingerprint.concat(r)), t.fingerprint.length || delete t.fingerprint;
}
export {
  N as applyScopeDataToEvent,
  c as mergeAndOverwriteScopeData,
  j as mergeScopeData
};
