export var DeploymentState;
(function (DeploymentState) {
    DeploymentState["UNSAVED"] = "unsaved";
    DeploymentState["COMMITTED"] = "committed";
    DeploymentState["DEPLOYMENT_STARTED"] = "deployment_started";
    DeploymentState["DEPLOYMENT_FAILED"] = "deployment_failed";
    DeploymentState["DEPLOYMENT_COMPLETED"] = "deployment_completed";
})(DeploymentState || (DeploymentState = {}));
export function checkIsStaticDeployUrl(url, repo = '', branch = '') {
    const hostname = url.hostname;
    const repoNameWithoutOwner = repo.slice(repo.indexOf("/") + 1);
    const isVercel = hostname.endsWith("vercel.app");
    const expectedPrefixForBranchDeployment = `${repoNameWithoutOwner}-git-${branch}`;
    const isVercelBranchDeployment = hostname.startsWith(expectedPrefixForBranchDeployment);
    const isDynamic = (isVercel && !isVercelBranchDeployment);
    return !isDynamic || hostname === "localhost";
}
;
// TODO: committed but not deployed state?
export function checkIsDeploying(state) {
    return state === DeploymentState.DEPLOYMENT_STARTED || state === DeploymentState.COMMITTED;
}
export function deployColor(state) {
    let color = "bg-gray-400";
    switch (state) {
        case DeploymentState.DEPLOYMENT_STARTED:
        case DeploymentState.COMMITTED:
            color = "bg-yellow-400";
            break;
        case DeploymentState.DEPLOYMENT_COMPLETED:
            color = "bg-green-500";
            break;
        case DeploymentState.DEPLOYMENT_FAILED:
            color = "bg-red-500";
            break;
        default:
            color = "bg-gray-400";
            break;
    }
    return color;
}
export function deployStatusString(state) {
    switch (state) {
        case DeploymentState.DEPLOYMENT_STARTED:
        case DeploymentState.COMMITTED:
            return "Deploying";
        case DeploymentState.DEPLOYMENT_COMPLETED:
            return "Deployed";
        case DeploymentState.DEPLOYMENT_FAILED:
            return "Failed";
        default:
            return "Unsaved";
    }
}
/**
 * Sanitize a string for use as a GitHub branch name.
 * - Removes invalid characters
 * - Normalizes consecutive slashes
 * - Ensures it doesn't end with .lock or a slash
 */
export function sanitizeBranchName(input) {
    let branch = input.trim();
    branch = branch.replace(/\\/g, "/");
    branch = branch.replace(/[^a-zA-Z0-9\-._/]/g, "-"); // only allow valid characters
    branch = branch.replace(/\/{2,}/g, "/");
    branch = branch.replace(/^\/+|\/+$/g, "");
    branch = branch.replace(/@\{/g, "-"); // don't allow special github syntax
    if (branch.endsWith(".lock")) {
        branch = branch.slice(0, -5) + "-lock";
    }
    if (!branch) {
        branch = "default-branch";
    }
    return branch;
}
export const BRANCH_PREFIX = "codepress/";
export function stripBranchPrefix(branchName) {
    return branchName.startsWith(BRANCH_PREFIX) ? branchName.slice(BRANCH_PREFIX.length) : branchName;
}
export function addBranchPrefix(branchName) {
    return branchName.startsWith(BRANCH_PREFIX) ? branchName : `${BRANCH_PREFIX}${branchName}`;
}
export function checkHasBranchPrefix(branchName) {
    return branchName.startsWith(BRANCH_PREFIX);
}
export function checkIsEmptyBranchPrefix(branchName) {
    return branchName === BRANCH_PREFIX;
}
export function checkIsOnCodepressBranch(branchName) {
    return checkHasBranchPrefix(branchName) && !checkIsEmptyBranchPrefix(branchName);
}
